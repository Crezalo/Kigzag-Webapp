[{"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/pages/_app.tsx":"1","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/pages/creatorprofile.tsx":"2","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/pages/creators.tsx":"3","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/pages/home.tsx":"4","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/pages/index.tsx":"5","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/pages/nft.tsx":"6","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/Account.tsx":"7","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/BasicModal.tsx":"8","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/ChainName.tsx":"9","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/CollectedTabs.tsx":"10","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/ConnectToWallet.tsx":"11","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/CreateProposalModal.tsx":"12","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/CreatorCard.tsx":"13","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/CreatorCardGrid.tsx":"14","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/DAOAllowances.tsx":"15","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/DAOProposalGridCard.tsx":"16","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/DAOTabs.tsx":"17","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/DAOTreasury.tsx":"18","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/ETHBalance.tsx":"19","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/Footer.tsx":"20","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/Header.tsx":"21","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/NFTCard.tsx":"22","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/NFTCardGrid.tsx":"23","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/NFTDetails.tsx":"24","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/NFTProperties.tsx":"25","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/NFTTable.tsx":"26","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/NFTTabs.tsx":"27","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/ProfileTabs.tsx":"28","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/TokenBalance.tsx":"29","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/TokenCard.tsx":"30","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/TokenCardGrid.tsx":"31","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/lib/sign/sign.js":"32","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/lib/timespan.js":"33","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/lib/verify/decrypter.js":"34","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/lib/verify/verify.js":"35","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/pages/discordplans.tsx":"36","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/pages/videoplayer.tsx":"37","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/ContentCardGrid.tsx":"38","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/UploadVideoModal.tsx":"39","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/VideoCard.tsx":"40"},{"size":1971,"mtime":1645307162883,"results":"41","hashOfConfig":"42"},{"size":12401,"mtime":1646068945060,"results":"43","hashOfConfig":"42"},{"size":1878,"mtime":1645824619225,"results":"44","hashOfConfig":"42"},{"size":12336,"mtime":1645824735073,"results":"45","hashOfConfig":"42"},{"size":83,"mtime":1642288452778,"results":"46","hashOfConfig":"42"},{"size":3865,"mtime":1645824818465,"results":"47","hashOfConfig":"42"},{"size":4543,"mtime":1645304834959,"results":"48","hashOfConfig":"42"},{"size":1786,"mtime":1645311353827,"results":"49","hashOfConfig":"42"},{"size":9698,"mtime":1645304858955,"results":"50","hashOfConfig":"42"},{"size":2328,"mtime":1645825990474,"results":"51","hashOfConfig":"42"},{"size":4117,"mtime":1644762811640,"results":"52","hashOfConfig":"42"},{"size":262,"mtime":1642605475694,"results":"53","hashOfConfig":"42"},{"size":2005,"mtime":1645818550713,"results":"54","hashOfConfig":"42"},{"size":992,"mtime":1645826872158,"results":"55","hashOfConfig":"42"},{"size":3848,"mtime":1644758021819,"results":"56","hashOfConfig":"42"},{"size":16235,"mtime":1645826356628,"results":"57","hashOfConfig":"42"},{"size":2134,"mtime":1645826413269,"results":"58","hashOfConfig":"42"},{"size":3020,"mtime":1644758021967,"results":"59","hashOfConfig":"42"},{"size":476,"mtime":1642785488948,"results":"60","hashOfConfig":"42"},{"size":479,"mtime":1645825378980,"results":"61","hashOfConfig":"42"},{"size":1104,"mtime":1645304291950,"results":"62","hashOfConfig":"42"},{"size":3844,"mtime":1646286915137,"results":"63","hashOfConfig":"42"},{"size":2108,"mtime":1646287076245,"results":"64","hashOfConfig":"42"},{"size":7088,"mtime":1646286256711,"results":"65","hashOfConfig":"42"},{"size":2364,"mtime":1645826553814,"results":"66","hashOfConfig":"42"},{"size":1370,"mtime":1642771891940,"results":"67","hashOfConfig":"42"},{"size":2682,"mtime":1645826606119,"results":"68","hashOfConfig":"42"},{"size":6030,"mtime":1645826755897,"results":"69","hashOfConfig":"42"},{"size":2927,"mtime":1644832846566,"results":"70","hashOfConfig":"42"},{"size":1430,"mtime":1645089944792,"results":"71","hashOfConfig":"42"},{"size":2523,"mtime":1645826812030,"results":"72","hashOfConfig":"42"},{"size":4531,"mtime":1644334867502,"results":"73","hashOfConfig":"42"},{"size":552,"mtime":1643910396437,"results":"74","hashOfConfig":"42"},{"size":1442,"mtime":1643910396437,"results":"75","hashOfConfig":"42"},{"size":2159,"mtime":1644334871782,"results":"76","hashOfConfig":"42"},{"size":16913,"mtime":1646281255660,"results":"77","hashOfConfig":"42"},{"size":3493,"mtime":1645824859081,"results":"78","hashOfConfig":"42"},{"size":2690,"mtime":1645826138552,"results":"79","hashOfConfig":"42"},{"size":6187,"mtime":1645360118849,"results":"80","hashOfConfig":"42"},{"size":3124,"mtime":1645825757274,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xki0pw",{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/pages/_app.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/pages/creatorprofile.tsx",["175"],"import { useRouter } from \"next/router\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport Settings from \"@mui/icons-material/Settings\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport Jdenticon from \"react-jdenticon\";\nimport BasicModal from \"../components/BasicModal\";\nimport ConnectToWallet from \"../components/ConnectToWallet\";\nimport CreateProposalModal from \"../components/CreateProposalModal\";\nimport ProfileTabs from \"../components/ProfileTabs\";\nimport {\n  DAI_SUPPORTED_ADDRESS,\n  LOYALTY_TOKEN_CREATOR_FACTORY_ADDRESS_LIST,\n  NATIVE_TOKEN_SUPPORTED_ADDRESS,\n  USDC_SUPPORTED_ADDRESS,\n} from \"../constants/chains\";\nimport { ZERO_ADDRESS } from \"../constants/misc\";\nimport {\n  useTokenName,\n  useTokenSymbol,\n  useTokenTotalSupply,\n} from \"../hooks/ERC20/useTokenContract\";\nimport {\n  useCreatorFactoryCreatorDAO,\n  useCreatorFactoryCreatorSaleFee,\n  useCreatorFactoryCreatorToken,\n} from \"../hooks/LoyaltyTokenContract/useCreatorFactoryContract\";\nimport { creatorFactoryLT, currencyName, parseBalance } from \"../util\";\nimport { fontWeight, textAlign, width } from \"@mui/system\";\nimport Image from \"next/image\";\nimport { getUserData } from \"../services/api-service\";\nimport { useEffect, useState } from \"react\";\nimport queryString from \"query-string\";\n\nexport default function CreatorProfile() {\n  const { chainId, account, library } = useWeb3React();\n  const router = useRouter();\n\n  let { address } = router.query;\n\n  if (!address) {\n    const url = router.asPath;\n    address = queryString.parseUrl(url).query.address;\n  }\n\n  /////////////////////// getting user data\n  const [user, setUser] = useState({\n    useraddress: \"\",\n    username: \"\",\n    iscreator: false,\n    twitterhandle: \"\",\n    discord: \"\",\n    tiktok: \"\",\n    instagram: \"\",\n    youtube: \"\",\n    website: \"\",\n  });\n\n  const GetUser = () => {\n    useEffect(() => {\n      async function getData() {\n        const res = await getUserData(\n          account,\n          library,\n          (address ?? \"\").toString()\n        );\n        setUser(res);\n      }\n      getData();\n    }, [account, chainId]);\n  };\n\n  GetUser();\n\n  const creatorToken =\n    useCreatorFactoryCreatorToken(\n      LOYALTY_TOKEN_CREATOR_FACTORY_ADDRESS_LIST[chainId],\n      (address ?? \"\").toString()\n    ).data ?? \"\";\n\n  const nativeToken = NATIVE_TOKEN_SUPPORTED_ADDRESS[chainId] ?? \"\";\n  const usdc = USDC_SUPPORTED_ADDRESS[chainId];\n  const dai = DAI_SUPPORTED_ADDRESS[chainId];\n\n  const creatorTokenName = useTokenName(creatorToken).data;\n  const creatorTokenSymbol = useTokenSymbol(creatorToken).data;\n  const creatorTokenTotalSupply = parseBalance(\n    useTokenTotalSupply(creatorToken).data ?? 0\n  );\n\n  // const nativeTokenSymbol = useTokenSymbol(nativeToken.toString()).data;\n\n  const { nativefee, usdfee } = useCreatorFactoryCreatorSaleFee(\n    LOYALTY_TOKEN_CREATOR_FACTORY_ADDRESS_LIST[chainId],\n    (address ?? \"\").toString()\n  ).data ?? { nativefee: 0, usdfee: 0 };\n\n  const nativeCreatorPrice = parseBalance(nativefee ?? 0);\n  const usdCreatorPrice = parseBalance(usdfee ?? 0);\n\n  return (\n    <div>\n      {creatorToken ? (\n        <div className=\"blueTextBlackBackground\" style={{ fontSize: 25 }}>\n          <div style={{ display: \"flex\" }}>\n            <div className=\"creatorImageDiv\">\n              <Jdenticon size={150} value={address.toString().toLowerCase()} />\n            </div>\n            <div className=\"creatorProfileDescription\">\n              <div\n                style={{\n                  minWidth: \"60vw\",\n                  // width: \"30vw\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <div style={{ fontSize: \"18px\", fontWeight: \"bold\" }}>\n                  {creatorTokenName} ({creatorTokenSymbol})\n                </div>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                  }}\n                >\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                    }}\n                  >\n                    <div\n                      style={{\n                        color: \"grey\",\n                        fontWeight: \"bold\",\n                        fontSize: \"18px\",\n                        marginTop: \"20px\",\n                        marginBottom: \"5px\",\n                      }}\n                    >\n                      Native\n                    </div>\n                    <div style={{ color: \"white\" }}>\n                      {nativeCreatorPrice} {currencyName(chainId)}\n                    </div>\n                  </div>\n\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      marginLeft: \"20px\",\n                      marginBottom: \"5px\",\n                    }}\n                  >\n                    <div\n                      style={{\n                        color: \"grey\",\n                        fontWeight: \"bold\",\n                        fontSize: \"18px\",\n                        marginTop: \"20px\",\n                        marginBottom: \"5px\",\n                      }}\n                    >\n                      US Dollar\n                    </div>\n                    <div style={{ color: \"white\" }}>{usdCreatorPrice} USD</div>\n                  </div>\n\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      marginLeft: \"20px\",\n                      marginBottom: \"5px\",\n                    }}\n                  >\n                    <div\n                      style={{\n                        color: \"grey\",\n                        fontWeight: \"bold\",\n                        fontSize: \"18px\",\n                        marginTop: \"20px\",\n                        marginBottom: \"5px\",\n                      }}\n                    >\n                      Total Supply\n                    </div>\n                    <div style={{ color: \"white\" }}>\n                      {creatorTokenTotalSupply}\n                    </div>\n                  </div>\n\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      marginLeft: \"20px\",\n                      marginBottom: \"5px\",\n                    }}\n                  >\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        width: \"150px\",\n                        height: \"45px\",\n                        margin: \"20px\",\n                        textAlign: \"center\",\n                      }}\n                    >\n                      <BasicModal\n                        modalButtonText={\"Get \" + creatorTokenSymbol}\n                        modalBody={<CreateProposalModal />}\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    marginTop: \"15px\",\n                  }}\n                >\n                  <div style={{ marginRight: \"10px\" }}>\n                    {user[0] && user[0].twitterhandle ? (\n                      <a\n                        href={\"https://twitter.com/\" + user[0].twitterhandle}\n                        style={{ marginTop: \"5px\", marginLeft: \"5px\" }}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        <Image\n                          src=\"/../public/twitter.png\"\n                          alt=\"\"\n                          width={25}\n                          height={20}\n                        />\n                      </a>\n                    ) : (\n                      <></>\n                    )}\n                  </div>\n                  <div style={{ marginRight: \"10px\" }}>\n                    {user[0] && user[0].discord ? (\n                      <a\n                        href={\"https://discord.com/invite/\" + user[0].discord}\n                        style={{ marginTop: \"5px\", marginLeft: \"5px\" }}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        <Image\n                          src=\"/../public/discord.png\"\n                          alt=\"\"\n                          width={25}\n                          height={25}\n                        />\n                      </a>\n                    ) : (\n                      <></>\n                    )}\n                  </div>\n                  <div style={{ marginRight: \"10px\" }}>\n                    {user[0] && user[0].tiktok ? (\n                      <a\n                        href={\"https://www.tiktok.com/@\" + user[0].tiktok}\n                        style={{ marginTop: \"5px\", marginLeft: \"5px\" }}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        <Image\n                          src=\"/../public/tiktok.png\"\n                          alt=\"\"\n                          width={25}\n                          height={25}\n                        />\n                      </a>\n                    ) : (\n                      <></>\n                    )}\n                  </div>\n                  <div style={{ marginRight: \"10px\" }}>\n                    {user[0] && user[0].instagram ? (\n                      <a\n                        href={\"https://instagram.com/\" + user[0].instagram}\n                        style={{ marginTop: \"5px\", marginLeft: \"5px\" }}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        <Image\n                          src=\"/../public/instagram.png\"\n                          alt=\"\"\n                          width={25}\n                          height={25}\n                        />\n                      </a>\n                    ) : (\n                      <></>\n                    )}\n                  </div>\n                  <div style={{ marginRight: \"10px\" }}>\n                    {user[0] && user[0].youtube ? (\n                      <a\n                        href={\n                          \"https://www.youtube.com/c/\" +\n                          user[0].youtube\n                            .toString()\n                            .toLowerCase()\n                            .replace(\" \", \"\")\n                        }\n                        style={{ marginTop: \"5px\", marginLeft: \"5px\" }}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        <Image\n                          src=\"/../public/youtube.png\"\n                          alt=\"\"\n                          width={25}\n                          height={20}\n                        />\n                      </a>\n                    ) : (\n                      <></>\n                    )}\n                  </div>\n                  <div style={{ marginRight: \"10px\" }}>\n                    {user[0] && user[0].website ? (\n                      <a\n                        href={user[0].website}\n                        style={{ marginTop: \"5px\", marginLeft: \"5px\" }}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        <Image\n                          src=\"/../public/website.png\"\n                          alt=\"\"\n                          width={25}\n                          height={20}\n                        />\n                      </a>\n                    ) : (\n                      <></>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <ProfileTabs onCreatorProfile={true} creator={address.toString()} />\n        </div>\n      ) : (\n        <>\n          {typeof account !== \"string\" ? (\n            <ConnectToWallet />\n          ) : (\n            <>\n              <CircularProgress\n                style={{ display: \"flex\", margin: \"auto\", height: \"80vh\" }}\n              />\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/pages/creators.tsx",["176"],"import React, { useEffect, useState } from \"react\";\nimport CreatorCardGrid from \"../components/CreatorCardGrid\";\nimport authHeader from \"../services/auth-header\";\nimport { getCreators } from \"../services/api-service\";\nimport axios from \"axios\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport ConnectToWallet from \"../components/ConnectToWallet\";\n\nexport default function Creators() {\n  const { account, chainId, library } = useWeb3React();\n\n  const [creatorsList, setCreatorsList] = useState([\n    {\n      useraddress: \"\",\n    },\n  ]);\n\n  const GetCreatorList = () => {\n    useEffect(() => {\n      async function getData() {\n        const res = await getCreators(account, chainId, library);\n        setCreatorsList(res);\n      }\n      getData();\n    }, [account, chainId]);\n  };\n\n  GetCreatorList();\n\n  const creators = [];\n  console.log(creatorsList);\n  console.log(creatorsList.length);\n  if (creatorsList) {\n    for (var i = 0; i < creatorsList.length; i++) {\n      if (creatorsList[i] && creatorsList[i].useraddress != \"\") {\n        creators.push(creatorsList[i].useraddress);\n      }\n    }\n  }\n\n  console.log(account);\n\n  return (\n    <div>\n      {creatorsList != [] && account ? (\n        <div\n          className=\"blueTextBlackBackground\"\n          style={{\n            justifyContent: \"center\",\n            fontSize: 25,\n          }}\n        >\n          <div style={{ marginTop: 25, marginLeft: 0 }}>\n            <CreatorCardGrid creators={creators} />\n          </div>\n        </div>\n      ) : (\n        <>\n          {typeof account !== \"string\" ? (\n            <ConnectToWallet />\n          ) : (\n            <>\n              <CircularProgress\n                style={{ display: \"flex\", margin: \"auto\", height: \"80vh\" }}\n              />\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/pages/home.tsx",["177"],"import { CircularProgress } from \"@material-ui/core\";\nimport Settings from \"@mui/icons-material/Settings\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport Jdenticon from \"react-jdenticon\";\nimport BasicModal from \"../components/BasicModal\";\nimport ConnectToWallet from \"../components/ConnectToWallet\";\nimport CreateProposalModal from \"../components/CreateProposalModal\";\nimport ProfileTabs from \"../components/ProfileTabs\";\nimport {\n  DAI_SUPPORTED_ADDRESS,\n  LOYALTY_TOKEN_CREATOR_FACTORY_ADDRESS_LIST,\n  NATIVE_TOKEN_SUPPORTED_ADDRESS,\n  USDC_SUPPORTED_ADDRESS,\n} from \"../constants/chains\";\nimport { ZERO_ADDRESS } from \"../constants/misc\";\nimport {\n  useTokenName,\n  useTokenSymbol,\n  useTokenTotalSupply,\n} from \"../hooks/ERC20/useTokenContract\";\nimport {\n  useCreatorFactoryCreatorDAO,\n  useCreatorFactoryCreatorSaleFee,\n  useCreatorFactoryCreatorToken,\n} from \"../hooks/LoyaltyTokenContract/useCreatorFactoryContract\";\nimport { creatorFactoryLT, currencyName, parseBalance } from \"../util\";\nimport Image from \"next/image\";\nimport { useEffect, useState } from \"react\";\nimport { getNFTsOfCreator, getUserData } from \"../services/api-service\";\nimport Router, { useRouter } from \"next/router\";\n\nexport default function Home() {\n  const { chainId, account, library } = useWeb3React();\n\n  /////////////////////// getting user data\n  const [user, setUser] = useState({\n    useraddress: \"\",\n    username: \"\",\n    iscreator: false,\n    twitterhandle: \"\",\n    discord: \"\",\n    tiktok: \"\",\n    instagram: \"\",\n    youtube: \"\",\n    website: \"\",\n  });\n\n  const GetUser = () => {\n    useEffect(() => {\n      async function getData() {\n        const res = await getUserData(account, library, account);\n        setUser(res);\n      }\n      getData();\n    }, [account, chainId]);\n  };\n\n  GetUser();\n\n  const creatorToken =\n    useCreatorFactoryCreatorToken(\n      LOYALTY_TOKEN_CREATOR_FACTORY_ADDRESS_LIST[chainId],\n      account\n    ).data ?? \"\";\n\n  const nativeToken = NATIVE_TOKEN_SUPPORTED_ADDRESS[chainId] ?? \"\";\n  const usdc = USDC_SUPPORTED_ADDRESS[chainId];\n  const dai = DAI_SUPPORTED_ADDRESS[chainId];\n\n  const creatorTokenName = useTokenName(creatorToken).data;\n  const creatorTokenSymbol = useTokenSymbol(creatorToken).data;\n  const creatorTokenTotalSupply = parseBalance(\n    useTokenTotalSupply(creatorToken).data ?? 0\n  );\n\n  // const nativeTokenSymbol = useTokenSymbol(nativeToken.toString()).data;\n\n  const { nativefee, usdfee } = useCreatorFactoryCreatorSaleFee(\n    LOYALTY_TOKEN_CREATOR_FACTORY_ADDRESS_LIST[chainId],\n    account\n  ).data ?? { nativefee: 0, usdfee: 0 };\n\n  const nativeCreatorPrice = parseBalance(nativefee ?? 0);\n  const usdCreatorPrice = parseBalance(usdfee ?? 0);\n\n  return (\n    <div>\n      {creatorToken ? (\n        <div className=\"blueTextBlackBackground\" style={{ fontSize: 25 }}>\n          <div style={{ display: \"flex\" }}>\n            <div className=\"creatorImageDiv\">\n              <Jdenticon size={150} value={account.toLowerCase()} />\n            </div>\n            {creatorToken === ZERO_ADDRESS ? (\n              <div className=\"becomeCreatorButton\">\n                <BasicModal\n                  modalButtonText=\"Become a Creator\"\n                  modalBody={<CreateProposalModal />}\n                />\n              </div>\n            ) : (\n              <div className=\"description\">\n                <div\n                  style={{\n                    minWidth: \"25vw\",\n                    width: \"30vw\",\n                    justifyContent: \"center\",\n                  }}\n                >\n                  <div style={{ fontSize: \"18px\", fontWeight: \"bold\" }}>\n                    {creatorTokenName} ({creatorTokenSymbol})\n                  </div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                    }}\n                  >\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                      }}\n                    >\n                      <div\n                        style={{\n                          color: \"grey\",\n                          fontWeight: \"bold\",\n                          fontSize: \"18px\",\n                          marginTop: \"20px\",\n                          marginBottom: \"5px\",\n                        }}\n                      >\n                        Native\n                      </div>\n                      <div style={{ color: \"white\" }}>\n                        {nativeCreatorPrice} {currencyName(chainId)}\n                      </div>\n                    </div>\n\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        marginLeft: \"20px\",\n                        marginBottom: \"5px\",\n                      }}\n                    >\n                      <div\n                        style={{\n                          color: \"grey\",\n                          fontWeight: \"bold\",\n                          fontSize: \"18px\",\n                          marginTop: \"20px\",\n                          marginBottom: \"5px\",\n                        }}\n                      >\n                        US Dollar\n                      </div>\n                      <div style={{ color: \"white\" }}>\n                        {usdCreatorPrice} USD\n                      </div>\n                    </div>\n\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        marginLeft: \"20px\",\n                        marginBottom: \"5px\",\n                      }}\n                    >\n                      <div\n                        style={{\n                          color: \"grey\",\n                          fontWeight: \"bold\",\n                          fontSize: \"18px\",\n                          marginTop: \"20px\",\n                          marginBottom: \"5px\",\n                        }}\n                      >\n                        Total Supply\n                      </div>\n                      <div style={{ color: \"white\" }}>\n                        {creatorTokenTotalSupply}\n                      </div>\n                    </div>\n                  </div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                      marginTop: \"15px\",\n                    }}\n                  >\n                    <div style={{ marginRight: \"10px\" }}>\n                      {user[0] && user[0].twitterhandle ? (\n                        <a\n                          href={\"https://twitter.com/\" + user[0].twitterhandle}\n                          style={{ marginTop: \"5px\", marginLeft: \"5px\" }}\n                          target=\"_blank\"\n                          rel=\"noreferrer\"\n                        >\n                          <Image\n                            src=\"/../public/twitter.png\"\n                            alt=\"\"\n                            width={25}\n                            height={20}\n                          />\n                        </a>\n                      ) : (\n                        <></>\n                      )}\n                    </div>\n                    <div style={{ marginRight: \"10px\" }}>\n                      {user[0] && user[0].discord ? (\n                        <a\n                          href={\"https://discord.com/invite/\" + user[0].discord}\n                          style={{ marginTop: \"5px\", marginLeft: \"5px\" }}\n                          target=\"_blank\"\n                          rel=\"noreferrer\"\n                        >\n                          <Image\n                            src=\"/../public/discord.png\"\n                            alt=\"\"\n                            width={25}\n                            height={25}\n                          />\n                        </a>\n                      ) : (\n                        <></>\n                      )}\n                    </div>\n                    <div style={{ marginRight: \"10px\" }}>\n                      {user[0] && user[0].tiktok ? (\n                        <a\n                          href={\"https://www.tiktok.com/@\" + user[0].tiktok}\n                          style={{ marginTop: \"5px\", marginLeft: \"5px\" }}\n                          target=\"_blank\"\n                          rel=\"noreferrer\"\n                        >\n                          <Image\n                            src=\"/../public/tiktok.png\"\n                            alt=\"\"\n                            width={25}\n                            height={25}\n                          />\n                        </a>\n                      ) : (\n                        <></>\n                      )}\n                    </div>\n                    <div style={{ marginRight: \"10px\" }}>\n                      {user[0] && user[0].instagram ? (\n                        <a\n                          href={\"https://instagram.com/\" + user[0].instagram}\n                          style={{ marginTop: \"5px\", marginLeft: \"5px\" }}\n                          target=\"_blank\"\n                          rel=\"noreferrer\"\n                        >\n                          <Image\n                            src=\"/../public/instagram.png\"\n                            alt=\"\"\n                            width={25}\n                            height={25}\n                          />\n                        </a>\n                      ) : (\n                        <></>\n                      )}\n                    </div>\n                    <div style={{ marginRight: \"10px\" }}>\n                      {user[0] && user[0].youtube ? (\n                        <a\n                          href={\n                            \"https://www.youtube.com/c/\" +\n                            user[0].youtube\n                              .toString()\n                              .toLowerCase()\n                              .replace(\" \", \"\")\n                          }\n                          style={{ marginTop: \"5px\", marginLeft: \"5px\" }}\n                          target=\"_blank\"\n                          rel=\"noreferrer\"\n                        >\n                          <Image\n                            src=\"/../public/youtube.png\"\n                            alt=\"\"\n                            width={25}\n                            height={20}\n                          />\n                        </a>\n                      ) : (\n                        <></>\n                      )}\n                    </div>\n                    <div style={{ marginRight: \"10px\" }}>\n                      {user[0] && user[0].website ? (\n                        <a\n                          href={user[0].website}\n                          style={{ marginTop: \"5px\", marginLeft: \"5px\" }}\n                          target=\"_blank\"\n                          rel=\"noreferrer\"\n                        >\n                          <Image\n                            src=\"/../public/website.png\"\n                            alt=\"\"\n                            width={25}\n                            height={20}\n                          />\n                        </a>\n                      ) : (\n                        <></>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div\n                  onClick={() =>\n                    Router.push({\n                      pathname: \"/videoplayer\",\n                      query: { videoid: \"1pNn6Gs51xRQ6z7X\" },\n                    })\n                  }\n                >\n                  {/* <Settings\n                    style={{ color: \"green\", height: \"40px\", width: \"40px\" }}\n                  /> */}\n                </div>\n              </div>\n            )}\n          </div>\n          <ProfileTabs onCreatorProfile={false} creator=\"\" />\n        </div>\n      ) : (\n        <>\n          {typeof account !== \"string\" ? (\n            <ConnectToWallet />\n          ) : (\n            <>\n              <CircularProgress\n                style={{ display: \"flex\", margin: \"auto\", height: \"80vh\" }}\n              />\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/pages/index.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/pages/nft.tsx",["178","179"],"import { useRouter } from \"next/router\";\nimport Image from \"next/image\";\nimport NFTDetails from \"../components/NFTDetails\";\nimport NFTProperties from \"../components/NFTProperties\";\nimport { useCreatorNFTTokenURI } from \"../hooks/ERC721/useCreatorNFTContract\";\nimport { useEffect, useState } from \"react\";\nimport { Spinner } from \"reactstrap\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { getNFTForGivenTokenId } from \"../services/api-service\";\nimport ConnectToWallet from \"../components/ConnectToWallet\";\nimport queryString from \"query-string\";\n\nexport default function NFT() {\n  const router = useRouter();\n  var { contract, tokenId, creator, status, vault } = router.query;\n\n  if (!contract) {\n    const url = router.asPath;\n    contract = queryString.parseUrl(url).query.contract;\n    tokenId = queryString.parseUrl(url).query.tokenId;\n    creator = queryString.parseUrl(url).query.creator;\n    status = queryString.parseUrl(url).query.status;\n    vault = queryString.parseUrl(url).query.vault;\n  }\n\n  const { chainId, account, library } = useWeb3React();\n\n  const [nft, setNft] = useState({\n    tokenuri: \"\",\n  });\n\n  const GetNFT = () => {\n    useEffect(() => {\n      async function getData() {\n        if (contract && chainId && tokenId) {\n          const res = await getNFTForGivenTokenId(\n            account,\n            library,\n            contract.toString(),\n            chainId,\n            tokenId.toString()\n          );\n          setNft(res);\n        }\n      }\n      getData();\n    }, [contract, tokenId, chainId]);\n  };\n\n  GetNFT();\n\n  const tokenURI = useCreatorNFTTokenURI(\n    (contract ?? \"\").toString(),\n    parseInt((tokenId ?? \"0\").toString())\n  ).data;\n\n  const [metadata, setmetadata] = useState({\n    metadata: [],\n  });\n\n  const GetMetadata = (metadataUrl: string) => {\n    useEffect(() => {\n      async function fetchData() {\n        const response = await fetch(metadataUrl);\n        const jsonData = await response.json();\n        setmetadata(jsonData);\n      }\n      fetchData();\n    }, [chainId, contract, tokenId]);\n  };\n\n  let metadataUrl = \"https://ipfs.io/ipfs/\";\n  if (tokenURI) {\n    metadataUrl = metadataUrl + tokenURI.substring(7);\n  }\n  GetMetadata(metadataUrl);\n\n  const image =\n    \"https://ipfs.io/ipfs/\" + (metadata[\"image\"] ?? \"\").substring(7);\n\n  let external_url;\n\n  if (nft[0]) {\n    external_url = nft[0].tokenuri ?? \"\";\n  } else {\n    external_url = \"\";\n  }\n  const name = metadata[\"name\"] ?? \"\";\n  const attributes = metadata[\"attributes\"] ?? \"\";\n  const description = metadata[\"description\"] ?? \"\";\n\n  return (\n    <div>\n      {attributes ? (\n        <div className=\"nftPage\">\n          <div>\n            <div className=\"nftPageImage\">\n              {external_url ? (\n                <Image\n                  src={external_url}\n                  alt=\"Loading ...\"\n                  width={550}\n                  height={550}\n                />\n              ) : (\n                <Image src={image} alt=\"Loading ...\" width={550} height={550} />\n              )}\n            </div>\n            <NFTDetails\n              contract={(contract ?? \"\").toString()}\n              tokenid={(tokenId ?? \"\").toString()}\n              creator={(creator ?? \"\").toString()}\n              status={(status ?? \"\").toString()}\n              vault={(vault ?? \"\").toString()}\n              name={name}\n            />\n          </div>\n          <NFTProperties properties={attributes} description={description} />\n        </div>\n      ) : (\n        <>\n          {typeof account !== \"string\" ? (\n            <ConnectToWallet />\n          ) : (\n            <>\n              <CircularProgress\n                style={{ display: \"flex\", margin: \"auto\", height: \"80vh\" }}\n              />\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/Account.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/BasicModal.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/ChainName.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/CollectedTabs.tsx",["180"],"import { Paper } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Tab from \"@material-ui/core/Tab/Tab\";\nimport Tabs from \"@material-ui/core/Tabs/Tabs\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { getAllNFTs } from \"../services/api-service\";\nimport NFTCardGrid from \"./NFTCardGrid\";\nimport TokenCardGrid from \"./TokenCardGrid\";\n\nconst useStyles = makeStyles({\n  tab: {\n    fontSize: \"16px\",\n    fontWeight: 500,\n  },\n});\n\ninterface CollectedTabsProp {\n  creatorVault: string;\n}\n\nconst CollectedTabs = ({ creatorVault }: CollectedTabsProp) => {\n  const classes = useStyles();\n\n  const [value, setValue] = React.useState(0);\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const { chainId, account, library } = useWeb3React();\n\n  //////////////////////// getting all NFTs\n  const [allnftsList, setAllnftsList] = useState([]);\n\n  const GetAllNftList = () => {\n    useEffect(() => {\n      async function getData() {\n        const res = await getAllNFTs(account, library, chainId);\n        setAllnftsList(res);\n      }\n      getData();\n    }, [account, chainId]);\n  };\n\n  GetAllNftList();\n\n  const allnfts = [];\n\n  if (allnftsList) {\n    for (var i = 0; i < allnftsList.length; i++) {\n      allnftsList[i][\"vault\"] = creatorVault;\n      allnfts.push(allnftsList[i]);\n    }\n  }\n\n  let tabs_array = [\n    <TokenCardGrid key={1}/>,\n    <TokenCardGrid key={2}/>,\n    <NFTCardGrid nfts={allnfts} status=\"OWNED\" key={3}/>,\n  ];\n\n  return (\n    <div\n      style={{\n        backgroundColor: \"black\",\n        display: \"flex\",\n        flexDirection: \"row\",\n      }}\n    >\n      <div style={{ width: \"10vw\" }}>\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          centered\n          TabIndicatorProps={{\n            style: { backgroundColor: \"#3B82F6\" },\n          }}\n          className=\"nftTabs\"\n          orientation=\"vertical\"\n        >\n          <Tab label=\"Plans\" className={classes.tab} />\n          <Tab label=\"Tokens\" className={classes.tab} />\n          <Tab label=\"NFT\" className={classes.tab} />\n        </Tabs>\n      </div>\n      <div style={{ width: \"90vw\" }}>\n        <Paper>{tabs_array[value]}</Paper>\n      </div>\n    </div>\n  );\n};\n\nexport default CollectedTabs;\n","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/ConnectToWallet.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/CreateProposalModal.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/CreatorCard.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/CreatorCardGrid.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/DAOAllowances.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/DAOProposalGridCard.tsx",["181","182"],"import { BigNumber } from \"@ethersproject/bignumber\";\nimport { makeStyles, Grid, LinearProgress } from \"@material-ui/core\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport Link from \"next/link\";\nimport { useEffect, useState } from \"react\";\nimport { LOYALTY_TOKEN_CREATOR_FACTORY_ADDRESS_LIST } from \"../constants/chains\";\nimport { ZERO_ADDRESS } from \"../constants/misc\";\nimport {\n  useDAOProposal,\n  useDAOProposals,\n  useDAOProposalVoteDataInfo,\n} from \"../hooks/LoyaltyTokenContract/useCreatorDAOContract\";\nimport useENSName from \"../hooks/useENSName\";\nimport { getDAOAllProposals } from \"../services/api-service\";\nimport {\n  currencyName,\n  formatBlockExplorerLink,\n  parseBalance,\n  shortenHex,\n} from \"../util\";\nimport BasicModal from \"./BasicModal\";\nimport CreateProposalModal from \"./CreateProposalModal\";\n\nconst useProgressBarstyles = makeStyles((theme) => ({\n  colorPrimary: {\n    backgroundColor: \"white\",\n  },\n  barColorPrimary: {\n    backgroundColor: \"#3B82F6\",\n  },\n}));\n\ninterface ProposalCardProp {\n  proposal: {\n    author: string;\n    chainid: number;\n    choices: string;\n    creator: string;\n    daoaddress: string;\n    duration: number;\n    id: string;\n    isallowancesproposal: true;\n    managers: string;\n    allowances: string;\n    isnative: boolean;\n    proposaldescription: string;\n    proposalid: number;\n    proposallink: string;\n    proposaltitle: string;\n    starttime: string;\n  };\n  dao: string;\n}\n\nexport const ProposalCard = ({ proposal, dao }: ProposalCardProp) => {\n  const classes = useProgressBarstyles();\n  const { chainId, account } = useWeb3React();\n  const choices = proposal.choices.split(\"\\t\");\n  var totalVoterTokenCount = 0;\n  var choiceData = [];\n\n  for (var i = 0; i < choices.length; i++) {\n    try {\n      var voterTokenCount = parseFloat(\n        parseBalance(\n          useDAOProposalVoteDataInfo(dao, proposal.proposalid, i).data\n            .votersTokenCount ?? 0\n        )\n      );\n    } catch (error) {\n      var voterTokenCount = 0.0;\n    }\n    totalVoterTokenCount += voterTokenCount;\n    choiceData.push({\n      choice: choices[i],\n      voterTokenCount: voterTokenCount,\n    });\n  }\n  const votingTimeLeft =\n    Date.now() - Date.parse(proposal.starttime) < proposal.duration * 1000 ? (\n      Date.parse(proposal.starttime) + proposal.duration * 1000 - Date.now() >\n      1000 * 3600 ? (\n        Math.round(\n          (Date.parse(proposal.starttime) +\n            proposal.duration * 1000 -\n            Date.now()) /\n            (1000 * 3600)\n        ).toString() + \"h left\"\n      ) : Date.parse(proposal.starttime) +\n          proposal.duration * 1000 -\n          Date.now() >\n        1000 * 60 ? (\n        Math.round(\n          (Date.parse(proposal.starttime) +\n            proposal.duration * 1000 -\n            Date.now()) /\n            (1000 * 60)\n        ).toString() + \"m left\"\n      ) : (\n        Math.round(\n          (Date.parse(proposal.starttime) +\n            proposal.duration * 1000 -\n            Date.now()) /\n            (1000 * 60)\n        ).toString() + \"s left\"\n      )\n    ) : (\n      <p style={{ color: \"red\" }}>Voting Closed</p>\n    );\n\n  try {\n    var managers = proposal.managers.split(\"\\t\");\n    var allowances = proposal.allowances.split(\"\\t\");\n    var isnative = proposal.isnative;\n  } catch (error) {\n    var managers = [\"\"];\n    var allowances = [\"\"];\n    var isnative = false;\n  }\n\n  // var allowanceData = [];\n\n  // for (var i = 0; i < managers.length; i++) {\n  //   if (managers[i] !== \"\") {\n  //     allowanceData.push({\n  //       manager: managers[i],\n  //       allowance: allowances[i],\n  //     });\n  //   }\n  // }\n\n  // console.log(allowanceData);\n\n  return (\n    <>\n      {proposal.author === ZERO_ADDRESS ? (\n        <></>\n      ) : (\n        <div>\n          <section className=\"proposalCard\">\n            {!proposal.isallowancesproposal ? (\n              <div className=\"proposalDetails\">\n                <h2>\n                  {proposal.proposalid + 1}. {proposal.proposaltitle}\n                </h2>\n                <p\n                  style={{\n                    fontSize: \"15px\",\n                    marginTop: \"10px\",\n                    marginLeft: \"10px\",\n                    textAlign: \"left\",\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                  }}\n                >\n                  <p style={{ color: \"grey\" }}>Author</p>&nbsp;\n                  <a\n                    {...{\n                      href: formatBlockExplorerLink(\"Account\", [\n                        chainId,\n                        proposal.author,\n                        \"\",\n                      ]),\n                      target: \"_blank\",\n                      rel: \"noopener noreferrer\",\n                    }}\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                      width: \"30%\",\n                    }}\n                  >\n                    ({/* {useENSName(proposal.author) || */}\n                    {shortenHex(proposal.author, 2)})\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"17px\"\n                      height=\"17px\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"#C3C5CB\"\n                      strokeWidth=\"2\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      style={{ marginLeft: \"12px\" }}\n                    >\n                      <path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"></path>\n                      <polyline points=\"15 3 21 3 21 9\"></polyline>\n                      <line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\"></line>\n                    </svg>\n                  </a>\n                </p>\n                <p\n                  style={{\n                    fontSize: \"12px\",\n                    marginTop: \"10px\",\n                    marginLeft: \"10px\",\n                    textAlign: \"left\",\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                  }}\n                >\n                  {votingTimeLeft}\n                </p>\n                <p\n                  style={{\n                    fontSize: \"18px\",\n                    margin: \"10px\",\n                    textAlign: \"left\",\n                  }}\n                >\n                  {proposal.proposaldescription}\n                </p>\n              </div>\n            ) : (\n              <div className=\"proposalDetails\">\n                <h2>{proposal.proposalid + 1}. Allowances Proposal</h2>\n                <p\n                  style={{\n                    fontSize: \"15px\",\n                    marginTop: \"10px\",\n                    marginLeft: \"10px\",\n                    textAlign: \"left\",\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                  }}\n                >\n                  <p style={{ color: \"grey\" }}>Author</p>&nbsp;\n                  <a\n                    {...{\n                      href: formatBlockExplorerLink(\"Account\", [\n                        chainId,\n                        proposal.author,\n                        \"\",\n                      ]),\n                      target: \"_blank\",\n                      rel: \"noopener noreferrer\",\n                    }}\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                      width: \"30%\",\n                    }}\n                  >\n                    ({/* {useENSName(proposal.author) || */}\n                    {shortenHex(proposal.author, 2)})\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"17px\"\n                      height=\"17px\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"#C3C5CB\"\n                      strokeWidth=\"2\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      style={{ marginLeft: \"12px\" }}\n                    >\n                      <path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"></path>\n                      <polyline points=\"15 3 21 3 21 9\"></polyline>\n                      <line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\"></line>\n                    </svg>\n                  </a>\n                </p>\n                <p\n                  style={{\n                    fontSize: \"12px\",\n                    marginTop: \"10px\",\n                    marginLeft: \"10px\",\n                    textAlign: \"left\",\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                  }}\n                >\n                  {votingTimeLeft}\n                </p>\n                <div\n                  style={{\n                    fontSize: \"18px\",\n                    margin: \"10px\",\n                    textAlign: \"center\",\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"space-evenly\",\n                  }}\n                >\n                  <div>\n                    <p style={{ color: \"grey\" }}>Managers</p>\n                    {managers.map((adata, index) => (\n                      <p\n                        style={{\n                          fontSize: \"18px\",\n                          marginTop: \"10px\",\n                          marginLeft: \"10px\",\n                          textAlign: \"center\",\n                          display: \"flex\",\n                          flexDirection: \"row\",\n                          justifyContent: \"center\",\n                        }}\n                        key={index}\n                      >\n                        <a\n                          {...{\n                            href: formatBlockExplorerLink(\"Account\", [\n                              chainId,\n                              adata,\n                              \"\",\n                            ]),\n                            target: \"_blank\",\n                            rel: \"noopener noreferrer\",\n                          }}\n                          style={{\n                            display: \"flex\",\n                            flexDirection: \"row\",\n                          }}\n                        >\n                          {/* ({useENSName(adata) ||  */}\n                          {shortenHex(adata, 4)}\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            width=\"17px\"\n                            height=\"17px\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            stroke=\"#C3C5CB\"\n                            strokeWidth=\"2\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            style={{ marginLeft: \"12px\" }}\n                          >\n                            <path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"></path>\n                            <polyline points=\"15 3 21 3 21 9\"></polyline>\n                            <line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\"></line>\n                          </svg>\n                        </a>\n                      </p>\n                    ))}\n                  </div>\n                  <div>\n                    <p style={{ color: \"grey\" }}>Allowance</p>\n                    {allowances.map((adata, index) => (\n                      <p\n                        style={{\n                          fontSize: \"18px\",\n                          marginTop: \"10px\",\n                          marginLeft: \"10px\",\n                          textAlign: \"center\",\n                          display: \"flex\",\n                          flexDirection: \"row\",\n                          justifyContent: \"center\",\n                        }}\n                        key={index}\n                      >\n                        <p>\n                          {parseBalance(adata)}{\" \"}\n                          {isnative ? currencyName(chainId) : \"USD\"}\n                        </p>\n                      </p>\n                    ))}\n                  </div>\n                </div>\n                <p\n                  style={{\n                    fontSize: \"18px\",\n                    margin: \"10px\",\n                    textAlign: \"left\",\n                  }}\n                >\n                  {proposal.proposaldescription}\n                </p>\n              </div>\n            )}\n            <div className=\"proposalVoting\">\n              {choiceData.map((choiceDataPoint, index) => (\n                <p className=\"choiceVote\" key={index}>\n                  <BasicModal\n                    modalButtonText={choiceDataPoint.choice}\n                    modalBody={<CreateProposalModal />}\n                  />\n                  <LinearProgress\n                    classes={classes}\n                    style={{\n                      width: \"30%\",\n                      margin: \"10px 10px 10px 150px\",\n                      padding: \"10px\",\n                    }}\n                    variant=\"determinate\"\n                    value={\n                      totalVoterTokenCount > 0\n                        ? Math.round(\n                            (choiceDataPoint.voterTokenCount * 10000) /\n                              totalVoterTokenCount\n                          ) / 100\n                        : 0\n                    }\n                  />\n                  <h2>\n                    {totalVoterTokenCount > 0\n                      ? Math.round(\n                          (choiceDataPoint.voterTokenCount * 10000) /\n                            totalVoterTokenCount\n                        ) / 100\n                      : 0}\n                    %\n                  </h2>\n                </p>\n              ))}\n            </div>\n          </section>\n        </div>\n      )}\n    </>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\ninterface GridItemProps {\n  proposal: {\n    author: string;\n    chainid: number;\n    choices: string;\n    creator: string;\n    daoaddress: string;\n    duration: number;\n    id: string;\n    isallowancesproposal: true;\n    managers: string;\n    allowances: string;\n    isnative: boolean;\n    proposaldescription: string;\n    proposalid: number;\n    proposallink: string;\n    proposaltitle: string;\n    starttime: string;\n  };\n  dao: string;\n  classes: any;\n}\nconst GridItem = ({ proposal, dao, classes }: GridItemProps) => {\n  return (\n    // From 0 to 600px wide (smart-phones), I take up 12 columns, or the whole device width!\n    // From 600-690px wide (tablets), I take up 6 out of 12 columns, so 2 columns fit the screen.\n    // From 960px wide and above, I take up 25% of the device (3/12), so 4 columns fit the screen.\n    <Grid item xs={12} sm={12} md={12}>\n      <ProposalCard proposal={proposal} dao={dao} />\n    </Grid>\n  );\n};\n\ninterface ProposalCardGridProp {\n  dao: string;\n}\nconst DAOProposalGridCard = ({ dao }: ProposalCardGridProp) => {\n  const classes = useStyles();\n\n  const { chainId, account, library } = useWeb3React();\n\n  const [proposalsList, setProposalsList] = useState([]);\n\n  const GetProposalList = () => {\n    useEffect(() => {\n      async function getData() {\n        const res = await getDAOAllProposals(account, library, chainId, dao);\n        setProposalsList(res);\n      }\n      getData();\n    }, [account, chainId]);\n  };\n\n  GetProposalList();\n\n  const proposals = [];\n\n  if (proposalsList) {\n    for (const x of proposalsList) {\n      proposals.push(x);\n    }\n  }\n\n  return (\n    <div className=\"blueTextBlackBackground\">\n      <BasicModal\n        modalButtonText=\"Create Proposal\"\n        modalBody={<CreateProposalModal />}\n      />\n      <Grid container spacing={1}>\n        {proposals.map((proposal) => (\n          <GridItem\n            proposal={proposal}\n            dao={dao}\n            classes={classes}\n            key={proposal.id}\n          />\n        ))}\n      </Grid>\n    </div>\n  );\n};\nexport default DAOProposalGridCard;\n","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/DAOTabs.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/DAOTreasury.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/ETHBalance.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/Footer.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/Header.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/NFTCard.tsx",["183"],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/NFTCardGrid.tsx",["184"],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/NFTDetails.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/NFTProperties.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/NFTTable.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/NFTTabs.tsx",["185"],"import { Paper } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Tab from \"@material-ui/core/Tab/Tab\";\nimport Tabs from \"@material-ui/core/Tabs/Tabs\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useEffect, useState } from \"react\";\nimport { getNFTsOfCreator } from \"../services/api-service\";\nimport NFTCardGrid from \"./NFTCardGrid\";\n\nconst useStyles = makeStyles({\n  tab: {\n    fontSize: \"16px\",\n    fontWeight: 500,\n  },\n});\n\ninterface NFTTabsProp {\n  creator: string;\n  onCreatorProfile: boolean;\n  creatorVault:string;\n}\n\nconst NFTTabs = ({ creator, onCreatorProfile, creatorVault }: NFTTabsProp) => {\n  const classes = useStyles();\n\n  const [value, setValue] = useState(0);\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const { chainId, account, library } = useWeb3React();\n\n  /////////////////////// getting creator NFTs\n  const [nftsList, setNftsList] = useState([]);\n\n  const GetNftOfCreatorList = () => {\n    useEffect(() => {\n      async function getData() {\n        const res = await getNFTsOfCreator(\n          account,\n          library,\n          onCreatorProfile\n            ? creator.toLowerCase()\n            : account.toLowerCase(),\n          chainId\n        );\n        setNftsList(res);\n      }\n      getData();\n    }, [account, chainId]);\n  };\n\n  GetNftOfCreatorList();\n\n  const nfts = [];\n\n  if (nftsList) {\n    for (var i = 0; i < nftsList.length; i++) {\n      nftsList[i][\"vault\"] = creatorVault;\n      nfts.push(nftsList[i]);\n    }\n  }\n\n  let tabs_array = [\n    <NFTCardGrid nfts={nfts} status=\"ALL\" key={1}/>, // All\n    <NFTCardGrid nfts={nfts} status=\"LISTED\" key={2}/>, // Listed for Sale\n    <NFTCardGrid nfts={nfts} status=\"UNLISTED\" key={3}/>, // Unlisted\n    <NFTCardGrid nfts={nfts} status=\"SOLD\" key={4}/>  // Sold\n  ];\n\n  return (\n    <div style={{backgroundColor:\"black\", display: \"flex\", flexDirection: \"row\"}}>\n        <div style={{width: \"10vw\"}}>\n          <Tabs\n              value={value}\n              onChange={handleChange}\n              centered\n              TabIndicatorProps={{\n              style: { backgroundColor: \"#3B82F6\" },\n              }}\n              className=\"nftTabs\"\n              orientation=\"vertical\"\n          >\n              <Tab label=\"All\" className={classes.tab} />\n              <Tab label=\"Listed\" className={classes.tab} />\n              <Tab label=\"Unlisted\" className={classes.tab} />\n              <Tab label=\"Sold\" className={classes.tab} />\n          </Tabs>\n        </div>\n        <div style={{width: \"90vw\"}}>\n            <Paper>{tabs_array[value]}</Paper>\n        </div>\n    </div>\n  );\n};\n\nexport default NFTTabs;\n","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/ProfileTabs.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/TokenBalance.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/TokenCard.tsx",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/TokenCardGrid.tsx",["186"],"import { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport React, { useEffect, useState } from \"react\";\nimport { Paper } from \"@material-ui/core\";\nimport TokenCard from \"./TokenCard\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useTokenBalance } from \"../hooks/ERC20/useTokenContract\";\nimport { parseBalance } from \"../util\";\nimport { getTokens } from \"../services/api-service\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\ninterface GridItemProps {\n  tokenAddress: string;\n  classes: any;\n}\nconst GridItem = ({ tokenAddress, classes }: GridItemProps) => {\n  return (\n    // From 0 to 600px wide (smart-phones), I take up 12 columns, or the whole device width!\n    // From 600-690px wide (tablets), I take up 6 out of 12 columns, so 2 columns fit the screen.\n    // From 960px wide and above, I take up 25% of the device (3/12), so 4 columns fit the screen.\n    <Grid item xs={12} sm={6} md={3}>\n      <TokenCard tokenAddress={tokenAddress} />\n      {/* <Paper className={classes.paper}>item</Paper> */}\n    </Grid>\n  );\n};\n\nconst TokenCardGrid = () => {\n  const classes = useStyles();\n  const { chainId, account, library } = useWeb3React();\n\n  ////////////////////// getting all tokens\n  const [alltokensList, setAlltokensList] = useState([]);\n\n  const GetAllTokenList = () => {\n    useEffect(() => {\n      async function getData() {\n        const res = await getTokens(account, library, chainId);\n        setAlltokensList(res);\n      }\n      getData();\n    }, [account, chainId]);\n  };\n\n  GetAllTokenList();\n\n  const alltokens = [];\n\n  if (alltokensList) {\n    for (var i = 0; i < alltokensList.length; i++) {\n      alltokens.push(alltokensList[i].tokenaddress);\n    }\n  }\n\n  return (\n    <div className=\"blueTextBlackBackground\">\n      <Grid container spacing={1}>\n        {alltokens.map((tokenAddress) => (\n          // Resolve Render more hooks issue over here to only show those tokens that have non zero balance\n          // <>\n          //   {parseBalance(useTokenBalance(account, tokenAddress).data??0) !=  '0.000' ? (\n          //     <GridItem tokenAddress={tokenAddress} classes={classes} />\n          //   ) : (\n          //     <></>\n          //   )}\n          // </>\n          <GridItem tokenAddress={tokenAddress} classes={classes} key={tokenAddress}/>\n        ))}\n      </Grid>\n    </div>\n  );\n};\nexport default TokenCardGrid;\n","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/lib/sign/sign.js",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/lib/timespan.js",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/lib/verify/decrypter.js",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/lib/verify/verify.js",[],"/home/ronnie8888/Documents/Kigzag-Webapp/frontend/pages/discordplans.tsx",["187"],"import { useRouter } from \"next/router\";\nimport Router from \"next/router\";\nimport Image from \"next/image\";\nimport NFTDetails from \"../components/NFTDetails\";\nimport NFTProperties from \"../components/NFTProperties\";\nimport { useCreatorNFTTokenURI } from \"../hooks/ERC721/useCreatorNFTContract\";\nimport { useEffect, useState } from \"react\";\nimport Jdenticon from \"react-jdenticon\";\nimport { Spinner } from \"reactstrap\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport {\n  getDiscordPlanDetails,\n  getNFTForGivenTokenId,\n} from \"../services/api-service\";\nimport * as React from \"react\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Grid from \"@mui/material/Grid\";\nimport StarIcon from \"@mui/icons-material/StarBorder\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Link from \"@mui/material/Link\";\nimport GlobalStyles from \"@mui/material/GlobalStyles\";\nimport Container from \"@mui/material/Container\";\nimport ConnectToWallet from \"../components/ConnectToWallet\";\nimport queryString from \"query-string\";\nimport { useCreatorTokenContract } from \"../hooks/LoyaltyTokenContract/useCreatorTokenContract\";\nimport { useCreatorFactoryCreatorToken } from \"../hooks/LoyaltyTokenContract/useCreatorFactoryContract\";\nimport { LOYALTY_TOKEN_CREATOR_FACTORY_ADDRESS_LIST } from \"../constants/chains\";\nimport { BigNumberish } from \"@ethersproject/bignumber\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport {\n  formatBlockExplorerLink,\n  retry,\n  RetryableError,\n  shortenHex,\n  RetryOptions,\n} from \"../util\";\n\nconst useStylesModal = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    // backgroundColor: theme.palette.background.paper,\n    // border: \"2px solid #000\",\n    borderRadius: \"5px\",\n    boxShadow: theme.shadows[5],\n    color: \"white\",\n    backgroundColor: \"#ffff\",\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport default function DiscordPlans() {\n  const router = useRouter();\n\n  const { chainId, account, library } = useWeb3React();\n\n  let { linkid } = router.query;\n\n  if (!linkid) {\n    const url = router.asPath;\n    linkid = queryString.parseUrl(url).query.linkid;\n  }\n\n  const [planDetails, setPlanDetails] = useState({\n    linkid: \"\",\n    user_discord_id: \"\",\n    serverid: \"\",\n    starttime: \"\",\n    creator: \"\",\n    symbol: \"\",\n    name: \"\",\n    \"1month\": 0,\n    \"3months\": 0,\n    \"1year\": 0,\n  });\n  const [linkExpired, setLinkExpired] = useState(false);\n  const [transactionStatus, setTransactionStatus] = useState(\"NOT_STARTED\");\n  const [txhash, setTxhash] = useState(\"\");\n\n  const GetDetails = () => {\n    useEffect(() => {\n      async function getData() {\n        const res = await getDiscordPlanDetails(\n          account,\n          library,\n          (linkid ?? \"\").toString()\n        );\n        if (res == \"Link Not Available\") {\n          setLinkExpired(true);\n        } else {\n          setLinkExpired(false);\n          setPlanDetails(res);\n        }\n      }\n      getData();\n    }, [account, chainId]);\n  };\n\n  GetDetails();\n\n  const creatorToken =\n    useCreatorFactoryCreatorToken(\n      LOYALTY_TOKEN_CREATOR_FACTORY_ADDRESS_LIST[chainId],\n      planDetails.creator ?? \"\"\n    ).data ?? \"\";\n\n  const creatorTokenContract = useCreatorTokenContract(creatorToken);\n\n  async function BurnMyTokens(amount: number) {\n    const res = await creatorTokenContract\n      .burnMyTokens(amount.toString())\n      .then((res) => {\n        setTransactionStatus(\"WAITING\");\n        setTxhash(res.hash);\n        handleOpen();\n        const receipt = library\n          .getTransactionReceipt(txhash)\n          .then((receipt) => {\n            if (receipt === null) {\n              console.debug(`Retrying tranasaction receipt for ${txhash}`);\n              throw new RetryableError();\n            }\n            setTimeout(() => {\n              setTransactionStatus(\"COMPLETED\");\n              setTimeout(() => {\n                handleClose();\n                console.log(\"receipt\");\n                console.log(receipt);\n                return receipt;\n              }, 1000);\n            }, 10000);\n          });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  const classesModal = useStylesModal();\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  const tiers = [\n    {\n      title: \"1 Month\",\n      price: planDetails[\"1month\"],\n      description: [\n        // \"1 month access to premium discord server\",\n      ],\n      buttonText: \"Buy Now\",\n      buttonVariant: \"outlined\",\n    },\n    {\n      title: \"3 Months\",\n      subheader: \"Most popular\",\n      price: planDetails[\"3months\"],\n      description: [\n        // \"3 months access to premium discord server\",\n      ],\n      buttonText: \"Buy Now\",\n      buttonVariant: \"outlined\",\n    },\n    {\n      title: \"1 Year\",\n      price: planDetails[\"1year\"],\n      description: [\n        // \"1 year access to premium discord server\",\n      ],\n      buttonText: \"Buy Now\",\n      buttonVariant: \"outlined\",\n    },\n  ];\n  const footers = [\n    {\n      title: \"Company\",\n      description: [\"Team\", \"History\", \"Contact us\", \"Locations\"],\n    },\n    {\n      title: \"Features\",\n      description: [\n        \"Cool stuff\",\n        \"Random feature\",\n        \"Team feature\",\n        \"Developer stuff\",\n        \"Another one\",\n      ],\n    },\n    {\n      title: \"Resources\",\n      description: [\n        \"Resource\",\n        \"Resource name\",\n        \"Another resource\",\n        \"Final resource\",\n      ],\n    },\n    {\n      title: \"Legal\",\n      description: [\"Privacy policy\", \"Terms of use\"],\n    },\n  ];\n\n  return (\n    <div>\n      {linkid && !linkExpired ? (\n        <>\n          {account ? (\n            <React.Fragment>\n              <GlobalStyles\n                styles={{ ul: { margin: 0, padding: 0, listStyle: \"none\" } }}\n              />\n              <CssBaseline />\n              <Container className=\"blueTextBlackBackground\">\n                <Container\n                  disableGutters\n                  maxWidth=\"sm\"\n                  component=\"main\"\n                  sx={{ pt: 8, pb: 6 }}\n                >\n                  <Typography\n                    component=\"h6\"\n                    variant=\"h5\"\n                    align=\"center\"\n                    color=\"#3b82f6\"\n                    gutterBottom\n                  >\n                    {planDetails.name} Discord Plans\n                  </Typography>\n                  <Typography\n                    variant=\"h6\"\n                    align=\"center\"\n                    color=\"white\"\n                    component=\"p\"\n                  >\n                    Exclusive interaction directly with me and my top fans.\n                  </Typography>\n                </Container>\n              </Container>\n              <Container maxWidth=\"md\" component=\"main\">\n                <Grid container spacing={5} alignItems=\"flex-end\">\n                  {tiers.map((tier) => (\n                    // Enterprise card is full width at sm breakpoint\n                    <Grid\n                      item\n                      key={tier.title}\n                      xs={12}\n                      sm={tier.title === \"1 Year\" ? 12 : 6}\n                      md={4}\n                    >\n                      <Card>\n                        <CardHeader\n                          title={tier.title}\n                          subheader={tier.subheader}\n                          titleTypographyProps={{ align: \"center\" }}\n                          action={\n                            tier.title === \"3 Months\" ? <StarIcon /> : null\n                          }\n                          subheaderTypographyProps={{\n                            align: \"center\",\n                          }}\n                          sx={{\n                            backgroundColor: (theme) =>\n                              theme.palette.mode === \"light\"\n                                ? theme.palette.grey[200]\n                                : theme.palette.grey[700],\n                          }}\n                        />\n                        <CardContent>\n                          <Box\n                            sx={{\n                              display: \"flex\",\n                              justifyContent: \"center\",\n                              alignItems: \"baseline\",\n                              mb: 2,\n                            }}\n                          >\n                            <Typography\n                              component=\"h2\"\n                              variant=\"h3\"\n                              color=\"#3b82f6\"\n                            >\n                              {tier.price} {planDetails.symbol}\n                            </Typography>\n                          </Box>\n                          <ul>\n                            {tier.description.map((line) => (\n                              <Typography\n                                component=\"li\"\n                                variant=\"subtitle1\"\n                                align=\"center\"\n                                key={line}\n                              >\n                                {line}\n                              </Typography>\n                            ))}\n                          </ul>\n                        </CardContent>\n                        <CardActions>\n                          <Button\n                            fullWidth\n                            variant={\n                              tier.buttonVariant as \"outlined\" | \"contained\"\n                            }\n                            onClick={async () => {\n                              await BurnMyTokens(tier.price * 10 ** 18);\n                            }}\n                          >\n                            {tier.buttonText}\n                          </Button>\n                        </CardActions>\n                      </Card>\n                    </Grid>\n                  ))}\n                </Grid>\n                <Modal\n                  aria-labelledby=\"transition-modal-title\"\n                  aria-describedby=\"transition-modal-description\"\n                  className={classesModal.modal}\n                  open={open}\n                  onClose={handleClose}\n                  closeAfterTransition\n                  BackdropComponent={Backdrop}\n                  BackdropProps={{\n                    timeout: 500,\n                  }}\n                >\n                  <Fade in={open}>\n                    <div className={classesModal.paper}>\n                      {transactionStatus === \"NOT_STARTED\" ? (\n                        <></>\n                      ) : (\n                        <div\n                          style={{\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                          }}\n                        >\n                          <p\n                            style={{\n                              color: \"#3b82f6\",\n                              fontWeight: \"bold\",\n                              fontSize: 20,\n                              textAlign: \"center\",\n                            }}\n                          >\n                            {transactionStatus === \"WAITING\"\n                              ? \"Processing, Please Wait!\"\n                              : \"Succesful !!!\"}\n                          </p>\n                          {transactionStatus === \"WAITING\" ? (\n                            <Image\n                              src=\"/../public/waiting.gif\"\n                              alt=\"\"\n                              width={200}\n                              height={200}\n                            />\n                          ) : (\n                            <Image\n                              src=\"/../public/green-tick.gif\"\n                              alt=\"\"\n                              width={200}\n                              height={200}\n                            />\n                          )}\n                          <Link>\n                            <a\n                              {...{\n                                href: formatBlockExplorerLink(\"Transaction\", [\n                                  chainId,\n                                  txhash,\n                                  \"\",\n                                ]),\n                                target: \"_blank\",\n                                rel: \"noopener noreferrer\",\n                              }}\n                              style={{ fontSize: 20, fontWeight: \"bold\" }}\n                            >\n                              {shortenHex(txhash, 10)}\n                            </a>\n                          </Link>\n                        </div>\n                      )}\n                    </div>\n                  </Fade>\n                </Modal>\n                <Container\n                  disableGutters\n                  maxWidth=\"sm\"\n                  component=\"main\"\n                  sx={{ pt: 4, pb: 2 }}\n                >\n                  <Typography\n                    variant=\"h6\"\n                    align=\"center\"\n                    color=\"white\"\n                    component=\"p\"\n                  >\n                    <Button\n                      fullWidth\n                      variant={\"contained\"}\n                      style={{ width: \"40%\", backgroundColor: \"#3b82f6\" }}\n                      onClick={() => {\n                        Router.push({\n                          pathname: \"/creatorprofile\",\n                          query: { address: planDetails.creator },\n                        });\n                      }}\n                    >\n                      Get {planDetails.symbol} here\n                    </Button>\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    align=\"center\"\n                    color=\"white\"\n                    component=\"p\"\n                    style={{ marginTop: \"10px\" }}\n                  >\n                    For Accepted Payments refer{\" \"}\n                    <Link>\n                      <a\n                        href=\"https://kigzag.com/#payments\"\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        here\n                      </a>\n                    </Link>\n                  </Typography>\n                </Container>\n              </Container>\n            </React.Fragment>\n          ) : (\n            <>\n              {typeof account !== \"string\" ? (\n                <ConnectToWallet />\n              ) : (\n                <>\n                  <CircularProgress\n                    style={{ display: \"flex\", margin: \"auto\", height: \"80vh\" }}\n                  />\n                </>\n              )}\n            </>\n          )}\n        </>\n      ) : (\n        <Container\n          disableGutters\n          maxWidth=\"lg\"\n          component=\"main\"\n          sx={{ pt: 8, pb: 6 }}\n        >\n          <Typography\n            component=\"h1\"\n            variant=\"h3\"\n            align=\"center\"\n            color=\"#3b82f6\"\n            gutterBottom\n            style={{ marginBottom: \"40px\", marginTop: \"40px\" }}\n          >\n            Invalid or Expired Link!!!\n          </Typography>\n          <Typography\n            variant=\"h6\"\n            align=\"center\"\n            color=\"white\"\n            component=\"p\"\n            style={{ marginBottom: \"20px\" }}\n          >\n            &#8688; Check if the link is same as shared by Kigzag Bot.\n          </Typography>\n          <Typography\n            variant=\"h6\"\n            align=\"center\"\n            color=\"white\"\n            component=\"p\"\n            style={{ marginBottom: \"20px\" }}\n          >\n            &#8688; Generated links are valid only for 30 mins.\n          </Typography>\n          <Typography\n            variant=\"h6\"\n            align=\"center\"\n            color=\"white\"\n            component=\"p\"\n            style={{ marginBottom: \"20px\" }}\n          >\n            &#8688;{\" \"}\n            {\n              \"If it's beyond 30 mins please rejoin the Discord server, Kigzag Bot will generate new link for you.\"\n            }\n          </Typography>\n        </Container>\n      )}\n    </div>\n  );\n}\n","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/pages/videoplayer.tsx",["188","189"],"import { useEffect, useState } from \"react\";\nimport Jdenticon from \"react-jdenticon\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport {\n  getVideoDetails,\n  getVideoSignedUrl,\n  VIDEO_API_URL,\n} from \"../services/api-service\";\nimport { shortenHex } from \"../util\";\nimport { ZERO_ADDRESS } from \"../constants/misc\";\nimport useENSName from \"../hooks/useENSName\";\nimport Router, { useRouter } from \"next/router\";\nimport ConnectToWallet from \"../components/ConnectToWallet\";\nimport queryString from \"query-string\";\n\nexport default function NFT() {\n  const router = useRouter();\n  let { videoid } = router.query;\n\n  if (!videoid) {\n    const url = router.asPath;\n    videoid = queryString.parseUrl(url).query.videoid;\n  }\n\n  const { chainId, account, library } = useWeb3React();\n\n  var [signedURl, setSignedURl] = useState(\"\");\n\n  const GetVideoUrl = () => {\n    useEffect(() => {\n      async function getData() {\n        const res = await getVideoSignedUrl(\n          account,\n          library,\n          (videoid ?? \"\").toString()\n        );\n        setSignedURl(res[\"signedurl\"]);\n      }\n      getData();\n    }, [account, chainId, videoid]);\n  };\n\n  GetVideoUrl();\n\n  const [videoDetails, setVideoDetails] = useState({\n    title: \"\",\n    description: \"\",\n    creator: \"\",\n  });\n\n  const GetDetails = () => {\n    useEffect(() => {\n      async function getData() {\n        const res = await getVideoDetails(\n          account,\n          library,\n          (videoid ?? \"\").toString()\n        );\n        setVideoDetails(res);\n      }\n      getData();\n    }, [account, chainId]);\n  };\n\n  GetDetails();\n\n  const title = videoDetails[0]?.title;\n  const description = videoDetails[0]?.description;\n  const creator = videoDetails[0]?.creator;\n\n  console.log(\"signedURl\");\n  console.log(signedURl);\n\n  return (\n    <div className=\"videoDiv\">\n      {signedURl != \"\" &&\n      signedURl &&\n      title &&\n      description &&\n      creator &&\n      account &&\n      videoid ? (\n        <>\n          <video\n            controls\n            autoPlay\n            crossOrigin=\"anonymous\"\n            controlsList=\"nodownload\"\n          >\n            <source src={signedURl} type=\"video/mp4\" />\n            {/* <track\n              label=\"English\"\n              kind=\"captions\"\n              srcLang=\"en\"\n              src={VIDEO_API_URL + \"captions/\" + videoid}\n              default\n            /> */}\n          </video>\n          <h1 className=\"videoDiv h1\">{title}</h1>\n          <section\n            onClick={() => {\n              Router.push({\n                pathname: \"/creatorprofile\",\n                query: {\n                  address: creator,\n                },\n              });\n            }}\n            className=\"creatorIdent pointer\"\n          >\n            <Jdenticon size={50} value={account.toLowerCase()} />\n            <h2 className=\"VideoDiv h2\">\n              {/* {useENSName(creator ? creator : ZERO_ADDRESS) || */}\n              {shortenHex(creator ? creator : \"Loading...\", 4)}\n            </h2>\n          </section>\n          <h1 className=\"VideoDiv p\">{description}</h1>\n        </>\n      ) : (\n        <>\n          {typeof account !== \"string\" ? (\n            <ConnectToWallet />\n          ) : (\n            <>\n              <CircularProgress\n                style={{ display: \"flex\", margin: \"auto\", height: \"80vh\" }}\n              />\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/ContentCardGrid.tsx",["190"],"import { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport React, { useEffect, useState } from \"react\";\nimport { Paper } from \"@material-ui/core\";\nimport NFTCard from \"./NFTCard\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useCreatorNFTOwnerOf } from \"../hooks/ERC721/useCreatorNFTContract\";\nimport {\n  getCreatorAllVideoDetails,\n  getNFTsOfCreator,\n} from \"../services/api-service\";\nimport VideoCard from \"./VideoCard\";\nimport BasicModal from \"./BasicModal\";\nimport CreateProposalModal from \"./CreateProposalModal\";\nimport UploadVideoModal from \"./UploadVideoModal\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\ninterface GridItemProps {\n  vid: {\n    videoid: string;\n    title: string;\n    description: string;\n    creator: string;\n    duration: number;\n  };\n  classes: any;\n}\nconst GridItem = ({ vid, classes }: GridItemProps) => {\n  return (\n    // From 0 to 600px wide (smart-phones), I take up 12 columns, or the whole device width!\n    // From 600-690px wide (tablets), I take up 6 out of 12 columns, so 2 columns fit the screen.\n    // From 960px wide and above, I take up 25% of the device (3/12), so 4 columns fit the screen.\n    <Grid item xs={12} sm={6} md={3}>\n      <VideoCard vid={vid} />\n      {/* <Paper className={classes.paper}>item</Paper> */}\n    </Grid>\n  );\n};\n\ninterface ContentCardGridProp {\n  creator: string;\n  onCreatorProfile: boolean;\n}\nconst ContentCardGrid = ({\n  creator,\n  onCreatorProfile,\n}: ContentCardGridProp) => {\n  const classes = useStyles();\n  const { account, library } = useWeb3React();\n\n  const [videoDetails, setVideoDetails] = useState([\n    {\n      title: \"\",\n      description: \"\",\n      creator: \"\",\n      duration: 0,\n      videoid: \"\",\n    },\n  ]);\n\n  const GetVidDetails = () => {\n    useEffect(() => {\n      async function getData() {\n        const res = await getCreatorAllVideoDetails(account, library, creator);\n        setVideoDetails(res);\n      }\n      getData();\n    }, [creator]);\n  };\n\n  GetVidDetails();\n\n  return (\n    <div className=\"blueTextBlackBackground\">\n      {!onCreatorProfile ? (\n        <div style={{margin: \"10px\"}}>\n          <BasicModal\n            modalButtonText=\"Add Video\"\n            modalBody={<UploadVideoModal />}\n          />\n        </div>\n      ) : (\n        <></>\n      )}\n      <Grid container spacing={1}>\n        {videoDetails.map((vid) => (\n          <>{vid.videoid ? <GridItem vid={vid} classes={classes} key={vid.videoid}/> : <></>}</>\n        ))}\n      </Grid>\n    </div>\n  );\n};\nexport default ContentCardGrid;\n","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/UploadVideoModal.tsx",["191"],"import { useWeb3React } from \"@web3-react/core\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { VIDEO_API_URL } from \"../services/api-service\";\nimport authHeader from \"../services/auth-header\";\nimport Image from \"next/image\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport { maxHeight } from \"@mui/system\";\n\nconst UploadVideoModal = () => {\n  const { chainId, account, library } = useWeb3React();\n\n  const [videofile, setVideofile] = useState(null);\n  const [thumbfile, setThumbfile] = useState(null);\n  const [fileUploadStatus, setFileUploadStatus] = useState(\"NO FILE ADDED\");\n\n  const vidplay = document.getElementById(\"video_player\") as HTMLVideoElement;\n  const vidsrc = document.getElementById(\"video_source\") as HTMLSourceElement;\n  const thumbImage = document.getElementById(\"thumb_image\") as HTMLImageElement;\n\n  const submitFile = async (event: any) => {\n    event.preventDefault();\n    try {\n      if (!videofile) {\n        throw new Error(\"Select a file first!\");\n      }\n      const formData = new FormData();\n      formData.append(\"video\", videofile[0]);\n      formData.append(\"thumbnail\", thumbfile[0]);\n      formData.append(\"title\", event.target.title.value);\n      formData.append(\"description\", event.target.description.value);\n      setFileUploadStatus(\"UPLOADING\");\n      const response = await axios.post(VIDEO_API_URL + \"upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: (await authHeader(account, library)).Authorization,\n        },\n      });\n      setFileUploadStatus(\"COMPLETE\");\n      console.log(response.data);\n      // handle success\n    } catch (error) {\n      // handle error\n      setFileUploadStatus(\"Failed To Upload Retry!\");\n    }\n  };\n\n  function reloadVideo() {\n    if (vidsrc && vidsrc.src != window.URL.createObjectURL(videofile[0])) {\n      vidsrc.src = window.URL.createObjectURL(videofile[0]);\n    }\n    if (vidplay) {\n      vidplay.load();\n    }\n  }\n\n  function reloadThumb() {\n    if (\n      thumbImage &&\n      thumbImage.src != window.URL.createObjectURL(thumbfile[0])\n    ) {\n      thumbImage.src = window.URL.createObjectURL(thumbfile[0]);\n    }\n  }\n\n  return (\n    <div style={{ overflowY: \"auto\", overflowX: \"hidden\", maxHeight: \"80vh\" }}>\n      {fileUploadStatus === \"Failed To Upload Retry!\" ? (\n        <p style={{ color: \"red\" }}>{fileUploadStatus}</p>\n      ) : (\n        <></>\n      )}\n      {fileUploadStatus !== \"COMPLETE\" && fileUploadStatus !== \"UPLOADING\" ? (\n        <form onSubmit={submitFile} className=\"form\">\n          <label className=\"form label\">Upload Video</label>\n          <input\n            type=\"file\"\n            onChange={(event) => {\n              setVideofile(event.target.files);\n              reloadVideo();\n            }}\n            required\n            className=\"form inputFile\"\n          />\n          {videofile ? (\n            <video\n              id=\"video_player\"\n              controls\n              autoPlay\n              crossOrigin=\"anonymous\"\n              controlsList=\"nodownload\"\n              style={{ width: \"28vw\", height: \"30vh\", margin: \"10px\" }}\n            >\n              <source\n                id=\"video_source\"\n                src={window.URL.createObjectURL(videofile[0])}\n                type=\"video/mp4\"\n              />\n              {/* <track\n              label=\"English\"\n              kind=\"captions\"\n              srcLang=\"en\"\n              src={VIDEO_API_URL + \"captions/\" + videoid}\n              default\n            /> */}\n            </video>\n          ) : (\n            <></>\n          )}\n          <label className=\"form label\" style={{ fontWeight: \"100\" }}>\n            Upload Thumbnail\n          </label>\n          <input\n            type=\"file\"\n            onChange={(event) => {\n              setThumbfile(event.target.files);\n              // reloadThumb(); // not needed\n            }}\n            required\n            className=\"form inputFile\"\n          />\n          {thumbfile ? (\n            <div\n              style={{\n                margin: \"10px\",\n                width: \"100%\",\n                height: \"100%\",\n              }}\n            >\n              <Image\n                id=\"thumb_image\"\n                src={window.URL.createObjectURL(thumbfile[0])}\n                width=\"350\"\n                height=\"220\"\n              />\n            </div>\n          ) : (\n            <></>\n          )}\n          <textarea\n            className=\"mb-4 border-b-2 form inputSingleLineText\"\n            id=\"title\"\n            name=\"title\"\n            maxLength={100}\n            autoComplete=\"title\"\n            style={{\n              color: \"black\",\n              overflow: \"auto\",\n              resize: \"both\",\n              width: \"30vw\",\n              height: \"8vh\",\n            }}\n            required\n            placeholder=\"Title Here ...\"\n          />\n          <textarea\n            className=\"mb-4 border-b-2 form inputSingleLineText\"\n            id=\"description\"\n            name=\"description\"\n            maxLength={5000}\n            autoComplete=\"description\"\n            style={{\n              color: \"black\",\n              resize: \"both\",\n              width: \"30vw\",\n              height: \"25vh\",\n              overflow: \"none\",\n            }}\n            required\n            placeholder=\"Description Here ...\"\n          />\n          <button\n            type=\"submit\"\n            className=\"outline outline-offset-0 px-2 py-2 rounded buyButton\"\n            style={{ width: \"10vw\" }}\n          >\n            Upload\n          </button>\n        </form>\n      ) : (\n        <>\n          {fileUploadStatus === \"UPLOADING\" ? (\n            <div>\n              <Image\n                src=\"/../public/uploading.gif\"\n                alt=\"\"\n                width={200}\n                height={200}\n              />\n            </div>\n          ) : (\n            <div>\n              <Image\n                src=\"/../public/green-tick.gif\"\n                alt=\"\"\n                width={200}\n                height={200}\n              />\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\nexport default UploadVideoModal;\n","/home/ronnie8888/Documents/Kigzag-Webapp/frontend/components/VideoCard.tsx",["192"],"import { useWeb3React } from \"@web3-react/core\";\nimport Jdenticon from \"react-jdenticon\";\nimport Image from \"next/image\";\nimport Router from \"next/router\";\nimport {\n  useCreatorFactoryCreatorSaleFee,\n  useCreatorFactoryCreatorToken,\n} from \"../hooks/LoyaltyTokenContract/useCreatorFactoryContract\";\nimport { useTokenName, useTokenSymbol } from \"../hooks/ERC20/useTokenContract\";\nimport { LOYALTY_TOKEN_CREATOR_FACTORY_ADDRESS_LIST } from \"../constants/chains\";\nimport { currencyName, parseBalance } from \"../util\";\nimport { useEffect, useState } from \"react\";\nimport { getVideoThumbnail } from \"../services/api-service\";\n\ninterface VideoCardProp {\n  vid: {\n    videoid: string;\n    title: string;\n    description: string;\n    creator: string;\n    duration: number;\n  };\n}\nconst VideoCard = ({ vid }: VideoCardProp) => {\n  const { account, chainId, library } = useWeb3React();\n\n  const [videoThumb, setVideoThumb] = useState(\"\");\n\n  const GetVidThumbnail = () => {\n    useEffect(() => {\n      async function getData() {\n        const res = await getVideoThumbnail(account, library, vid.videoid);\n        setVideoThumb(res[\"signedurl\"]);\n        console.log(videoThumb);\n      }\n      getData();\n    }, [account]);\n  };\n\n  GetVidThumbnail();\n\n  function seconds2time(sec) {\n    var hours = Math.floor(sec / 3600);\n    var minutes = Math.floor((sec - hours * 3600) / 60);\n    var seconds = sec - hours * 3600 - minutes * 60;\n    var time = \"\";\n\n    if (hours != 0) {\n      time = hours + \":\";\n    }\n\n    if (minutes != 0 || time !== \"\") {\n      time +=\n        minutes < 10 && time !== \"\" ? \"0\" + minutes : String(minutes) + \":\";\n    }\n    if (time === \"\") {\n      time = seconds + \"s\";\n    } else {\n      time += seconds < 10 ? \"0\" + seconds : String(seconds);\n    }\n    return time;\n  }\n\n  return (\n    <section\n      className=\"videoCard pointer\"\n      onClick={() =>\n        Router.push({\n          pathname: \"/videoplayer\",\n          query: { videoid: vid.videoid },\n        })\n      }\n    >\n      {vid.videoid != \"\" && vid.videoid ? (\n        <>\n          <div className=\"videoCardImage\">\n            {videoThumb.includes(\"https://\") ? (\n              <Image\n                src={videoThumb}\n                alt=\"Loading ...\"\n                width={300}\n                height={225}\n                className=\"videoCardImage\"\n              />\n            ) : (\n              <></>\n            )}\n            {/* <Image\n              src={videoThumb}\n              alt=\"Loading ...\"\n              width={300}\n              height={225}\n              className=\"videoCardImage\"\n            /> */}\n            <h3\n              className=\"bottom-right\"\n              style={{\n                fontSize: \"13px\",\n                backgroundColor: \"black\",\n                padding: \"1px\",\n              }}\n            >\n              {seconds2time(vid.duration)}\n            </h3>\n          </div>\n          <div style={{ padding: \"0px 5px 8px 15px\" }}>\n            <h1 style={{ fontSize: \"16px\" }}>{vid.title}</h1>\n          </div>\n        </>\n      ) : (\n        <></>\n      )}\n    </section>\n  );\n};\nexport default VideoCard;\n",{"ruleId":"193","severity":1,"message":"194","line":69,"column":8,"nodeType":"195","endLine":69,"endColumn":26,"suggestions":"196"},{"ruleId":"193","severity":1,"message":"194","line":26,"column":8,"nodeType":"195","endLine":26,"endColumn":26,"suggestions":"197"},{"ruleId":"193","severity":1,"message":"194","line":55,"column":8,"nodeType":"195","endLine":55,"endColumn":26,"suggestions":"198"},{"ruleId":"193","severity":1,"message":"199","line":48,"column":8,"nodeType":"195","endLine":48,"endColumn":36,"suggestions":"200"},{"ruleId":"193","severity":1,"message":"201","line":70,"column":8,"nodeType":"195","endLine":70,"endColumn":36,"suggestions":"202"},{"ruleId":"193","severity":1,"message":"194","line":42,"column":8,"nodeType":"195","endLine":42,"endColumn":26,"suggestions":"203"},{"ruleId":"204","severity":2,"message":"205","line":66,"column":11,"nodeType":"206","endLine":66,"endColumn":37},{"ruleId":"193","severity":1,"message":"194","line":474,"column":8,"nodeType":"195","endLine":474,"endColumn":26,"suggestions":"207"},{"ruleId":"193","severity":1,"message":"208","line":49,"column":8,"nodeType":"195","endLine":49,"endColumn":37,"suggestions":"209"},{"ruleId":"204","severity":2,"message":"210","line":53,"column":22,"nodeType":"206","endLine":53,"endColumn":42},{"ruleId":"193","severity":1,"message":"194","line":50,"column":8,"nodeType":"195","endLine":50,"endColumn":26,"suggestions":"211"},{"ruleId":"193","severity":1,"message":"194","line":49,"column":8,"nodeType":"195","endLine":49,"endColumn":26,"suggestions":"212"},{"ruleId":"193","severity":1,"message":"194","line":111,"column":8,"nodeType":"195","endLine":111,"endColumn":26,"suggestions":"213"},{"ruleId":"193","severity":1,"message":"214","line":41,"column":8,"nodeType":"195","endLine":41,"endColumn":35,"suggestions":"215"},{"ruleId":"193","severity":1,"message":"194","line":63,"column":8,"nodeType":"195","endLine":63,"endColumn":26,"suggestions":"216"},{"ruleId":"193","severity":1,"message":"217","line":75,"column":8,"nodeType":"195","endLine":75,"endColumn":17,"suggestions":"218"},{"ruleId":"219","severity":1,"message":"220","line":130,"column":15,"nodeType":"221","endLine":135,"endColumn":17},{"ruleId":"193","severity":1,"message":"222","line":37,"column":8,"nodeType":"195","endLine":37,"endColumn":17,"suggestions":"223"},"react-hooks/exhaustive-deps","React Hook useEffect has unnecessary dependencies: 'account' and 'chainId'. Either exclude them or remove the dependency array. Outer scope values like 'account' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["224"],["225"],["226"],"React Hook useEffect has unnecessary dependencies: 'chainId', 'contract', and 'tokenId'. Either exclude them or remove the dependency array. Outer scope values like 'contract' aren't valid dependencies because mutating them doesn't re-render the component.",["227"],"React Hook useEffect has a missing dependency: 'metadataUrl'. Either include it or remove the dependency array. Outer scope values like 'chainId' aren't valid dependencies because mutating them doesn't re-render the component.",["228"],["229"],"react-hooks/rules-of-hooks","React Hook \"useDAOProposalVoteDataInfo\" may be executed more than once. Possibly because it is called in a loop. React Hooks must be called in the exact same order in every component render.","Identifier",["230"],"React Hook useEffect has a missing dependency: 'metadataUrl'. Either include it or remove the dependency array. Outer scope values like 'nft.nftaddress' aren't valid dependencies because mutating them doesn't re-render the component.",["231"],"React Hook \"useCreatorNFTOwnerOf\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.",["232"],["233"],["234"],"React Hook useEffect has unnecessary dependencies: 'account', 'chainId', and 'videoid'. Either exclude them or remove the dependency array. Outer scope values like 'account' aren't valid dependencies because mutating them doesn't re-render the component.",["235"],["236"],"React Hook useEffect has an unnecessary dependency: 'creator'. Either exclude it or remove the dependency array. Outer scope values like 'creator' aren't valid dependencies because mutating them doesn't re-render the component.",["237"],"jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has an unnecessary dependency: 'account'. Either exclude it or remove the dependency array. Outer scope values like 'account' aren't valid dependencies because mutating them doesn't re-render the component.",["238"],{"desc":"239","fix":"240"},{"desc":"239","fix":"241"},{"desc":"239","fix":"242"},{"desc":"239","fix":"243"},{"desc":"244","fix":"245"},{"desc":"239","fix":"246"},{"desc":"239","fix":"247"},{"desc":"244","fix":"248"},{"desc":"239","fix":"249"},{"desc":"239","fix":"250"},{"desc":"239","fix":"251"},{"desc":"239","fix":"252"},{"desc":"239","fix":"253"},{"desc":"239","fix":"254"},{"desc":"239","fix":"255"},"Update the dependencies array to be: []",{"range":"256","text":"257"},{"range":"258","text":"257"},{"range":"259","text":"257"},{"range":"260","text":"257"},"Update the dependencies array to be: [metadataUrl]",{"range":"261","text":"262"},{"range":"263","text":"257"},{"range":"264","text":"257"},{"range":"265","text":"262"},{"range":"266","text":"257"},{"range":"267","text":"257"},{"range":"268","text":"257"},{"range":"269","text":"257"},{"range":"270","text":"257"},{"range":"271","text":"257"},{"range":"272","text":"257"},[2071,2089],"[]",[816,834],[1754,1772],[1582,1610],[2100,2128],"[metadataUrl]",[1172,1190],[15593,15611],[1495,1524],[1322,1340],[1640,1658],[3606,3624],[1187,1214],[1629,1647],[2111,2120],[1201,1210]]