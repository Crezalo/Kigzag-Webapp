/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface KigzagCreatorFactoryLTInterface extends utils.Interface {
  functions: {
    "allCreators(uint256)": FunctionFragment;
    "creatorDAO(address)": FunctionFragment;
    "creatorToken(address)": FunctionFragment;
    "creatorVault(address)": FunctionFragment;
    "dai()": FunctionFragment;
    "discount()": FunctionFragment;
    "exchangeAdmin()": FunctionFragment;
    "exchangeToken()": FunctionFragment;
    "fee()": FunctionFragment;
    "feeTo()": FunctionFragment;
    "feeToSetter()": FunctionFragment;
    "getCreatorAdmins(address)": FunctionFragment;
    "getCreatorExtraFee(address)": FunctionFragment;
    "getCreatorSaleFee(address)": FunctionFragment;
    "isCreatorAdmin(address,address)": FunctionFragment;
    "networkWrappedToken()": FunctionFragment;
    "newCreator(address,address,address,string,string,uint256,uint256)": FunctionFragment;
    "noOFTokensForDiscount()": FunctionFragment;
    "removeCreatorAdmins(address,uint256)": FunctionFragment;
    "setCreatorAdmins(address,address[])": FunctionFragment;
    "setDiscount(uint256)": FunctionFragment;
    "setExchangeToken(address)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "setFeeToSetter(address)": FunctionFragment;
    "setNoOFTokensForDiscount(uint256)": FunctionFragment;
    "updateCreatorExtraFeeNative(address,uint256)": FunctionFragment;
    "updateCreatorExtraFeeUSD(address,uint256)": FunctionFragment;
    "updateCreatorSaleFeeNative(address,uint256)": FunctionFragment;
    "updateCreatorSaleFeeUSD(address,uint256)": FunctionFragment;
    "usdc()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allCreators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "creatorDAO", values: [string]): string;
  encodeFunctionData(
    functionFragment: "creatorToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorVault",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "dai", values?: undefined): string;
  encodeFunctionData(functionFragment: "discount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchangeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeToSetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorAdmins",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorExtraFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorSaleFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCreatorAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "networkWrappedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newCreator",
    values: [string, string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "noOFTokensForDiscount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCreatorAdmins",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreatorAdmins",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDiscount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangeToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setFeeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeeToSetter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNoOFTokensForDiscount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCreatorExtraFeeNative",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCreatorExtraFeeUSD",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCreatorSaleFeeNative",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCreatorSaleFeeUSD",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "allCreators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creatorDAO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creatorToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "discount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeToSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorExtraFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorSaleFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCreatorAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkWrappedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newCreator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "noOFTokensForDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCreatorAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreatorAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeToSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNoOFTokensForDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCreatorExtraFeeNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCreatorExtraFeeUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCreatorSaleFeeNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCreatorSaleFeeUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;

  events: {
    "CreatorAdminAdded(address,address,address)": EventFragment;
    "CreatorAdminRemoved(address,address,address)": EventFragment;
    "CreatorDAOCreated(address,address)": EventFragment;
    "CreatorDAOUpdated(address,address,address)": EventFragment;
    "CreatorTokenCreated(address,address)": EventFragment;
    "CreatorVaultCreated(address,address)": EventFragment;
    "CreatorVaultUpdated(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatorAdminAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorAdminRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorDAOCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorDAOUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorTokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorVaultCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorVaultUpdated"): EventFragment;
}

export type CreatorAdminAddedEvent = TypedEvent<
  [string, string, string],
  { _creator: string; admin: string; by: string }
>;

export type CreatorAdminAddedEventFilter =
  TypedEventFilter<CreatorAdminAddedEvent>;

export type CreatorAdminRemovedEvent = TypedEvent<
  [string, string, string],
  { _creator: string; admin: string; by: string }
>;

export type CreatorAdminRemovedEventFilter =
  TypedEventFilter<CreatorAdminRemovedEvent>;

export type CreatorDAOCreatedEvent = TypedEvent<
  [string, string],
  { cdao: string; creator: string }
>;

export type CreatorDAOCreatedEventFilter =
  TypedEventFilter<CreatorDAOCreatedEvent>;

export type CreatorDAOUpdatedEvent = TypedEvent<
  [string, string, string],
  { cdaoOld: string; cdaoNew: string; creator: string }
>;

export type CreatorDAOUpdatedEventFilter =
  TypedEventFilter<CreatorDAOUpdatedEvent>;

export type CreatorTokenCreatedEvent = TypedEvent<
  [string, string],
  { token: string; creator: string }
>;

export type CreatorTokenCreatedEventFilter =
  TypedEventFilter<CreatorTokenCreatedEvent>;

export type CreatorVaultCreatedEvent = TypedEvent<
  [string, string],
  { vault: string; creator: string }
>;

export type CreatorVaultCreatedEventFilter =
  TypedEventFilter<CreatorVaultCreatedEvent>;

export type CreatorVaultUpdatedEvent = TypedEvent<
  [string, string, string],
  { cVaultOld: string; cVaultNew: string; creator: string }
>;

export type CreatorVaultUpdatedEventFilter =
  TypedEventFilter<CreatorVaultUpdatedEvent>;

export interface KigzagCreatorFactoryLT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KigzagCreatorFactoryLTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allCreators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    creatorDAO(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    creatorToken(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    creatorVault(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    dai(overrides?: CallOverrides): Promise<[string]>;

    discount(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeAdmin(overrides?: CallOverrides): Promise<[string]>;

    exchangeToken(overrides?: CallOverrides): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    feeToSetter(overrides?: CallOverrides): Promise<[string]>;

    getCreatorAdmins(
      _creator: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getCreatorExtraFee(
      _creator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getCreatorSaleFee(
      _creator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isCreatorAdmin(
      _creator: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    networkWrappedToken(overrides?: CallOverrides): Promise<[string]>;

    newCreator(
      _creator: string,
      _dao: string,
      _vault: string,
      _name: string,
      _symbol: string,
      _creatorSaleFeeNative: BigNumberish,
      _creatorSaleFeeUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    noOFTokensForDiscount(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeCreatorAdmins(
      _creator: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreatorAdmins(
      _creator: string,
      admins: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDiscount(
      _discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExchangeToken(
      _exchangeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNoOFTokensForDiscount(
      _noOFTokensForDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCreatorExtraFeeNative(
      _creator: string,
      _creatorExtraFeeNative: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCreatorExtraFeeUSD(
      _creator: string,
      _creatorExtraFeeUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCreatorSaleFeeNative(
      _creator: string,
      _creatorSaleFeeNative: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCreatorSaleFeeUSD(
      _creator: string,
      _creatorSaleFeeUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdc(overrides?: CallOverrides): Promise<[string]>;
  };

  allCreators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  creatorDAO(arg0: string, overrides?: CallOverrides): Promise<string>;

  creatorToken(arg0: string, overrides?: CallOverrides): Promise<string>;

  creatorVault(arg0: string, overrides?: CallOverrides): Promise<string>;

  dai(overrides?: CallOverrides): Promise<string>;

  discount(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeAdmin(overrides?: CallOverrides): Promise<string>;

  exchangeToken(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  feeToSetter(overrides?: CallOverrides): Promise<string>;

  getCreatorAdmins(
    _creator: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getCreatorExtraFee(
    _creator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getCreatorSaleFee(
    _creator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isCreatorAdmin(
    _creator: string,
    _admin: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  networkWrappedToken(overrides?: CallOverrides): Promise<string>;

  newCreator(
    _creator: string,
    _dao: string,
    _vault: string,
    _name: string,
    _symbol: string,
    _creatorSaleFeeNative: BigNumberish,
    _creatorSaleFeeUSD: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  noOFTokensForDiscount(overrides?: CallOverrides): Promise<BigNumber>;

  removeCreatorAdmins(
    _creator: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreatorAdmins(
    _creator: string,
    admins: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDiscount(
    _discount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExchangeToken(
    _exchangeToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeTo(
    _feeTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeToSetter(
    _feeToSetter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNoOFTokensForDiscount(
    _noOFTokensForDiscount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCreatorExtraFeeNative(
    _creator: string,
    _creatorExtraFeeNative: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCreatorExtraFeeUSD(
    _creator: string,
    _creatorExtraFeeUSD: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCreatorSaleFeeNative(
    _creator: string,
    _creatorSaleFeeNative: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCreatorSaleFeeUSD(
    _creator: string,
    _creatorSaleFeeUSD: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdc(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allCreators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    creatorDAO(arg0: string, overrides?: CallOverrides): Promise<string>;

    creatorToken(arg0: string, overrides?: CallOverrides): Promise<string>;

    creatorVault(arg0: string, overrides?: CallOverrides): Promise<string>;

    dai(overrides?: CallOverrides): Promise<string>;

    discount(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeAdmin(overrides?: CallOverrides): Promise<string>;

    exchangeToken(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    feeToSetter(overrides?: CallOverrides): Promise<string>;

    getCreatorAdmins(
      _creator: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getCreatorExtraFee(
      _creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getCreatorSaleFee(
      _creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isCreatorAdmin(
      _creator: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    networkWrappedToken(overrides?: CallOverrides): Promise<string>;

    newCreator(
      _creator: string,
      _dao: string,
      _vault: string,
      _name: string,
      _symbol: string,
      _creatorSaleFeeNative: BigNumberish,
      _creatorSaleFeeUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    noOFTokensForDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    removeCreatorAdmins(
      _creator: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreatorAdmins(
      _creator: string,
      admins: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setDiscount(
      _discount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExchangeToken(
      _exchangeToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeeTo(_feeTo: string, overrides?: CallOverrides): Promise<void>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNoOFTokensForDiscount(
      _noOFTokensForDiscount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCreatorExtraFeeNative(
      _creator: string,
      _creatorExtraFeeNative: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCreatorExtraFeeUSD(
      _creator: string,
      _creatorExtraFeeUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCreatorSaleFeeNative(
      _creator: string,
      _creatorSaleFeeNative: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCreatorSaleFeeUSD(
      _creator: string,
      _creatorSaleFeeUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    usdc(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CreatorAdminAdded(address,address,address)"(
      _creator?: null,
      admin?: null,
      by?: null
    ): CreatorAdminAddedEventFilter;
    CreatorAdminAdded(
      _creator?: null,
      admin?: null,
      by?: null
    ): CreatorAdminAddedEventFilter;

    "CreatorAdminRemoved(address,address,address)"(
      _creator?: null,
      admin?: null,
      by?: null
    ): CreatorAdminRemovedEventFilter;
    CreatorAdminRemoved(
      _creator?: null,
      admin?: null,
      by?: null
    ): CreatorAdminRemovedEventFilter;

    "CreatorDAOCreated(address,address)"(
      cdao?: null,
      creator?: null
    ): CreatorDAOCreatedEventFilter;
    CreatorDAOCreated(
      cdao?: null,
      creator?: null
    ): CreatorDAOCreatedEventFilter;

    "CreatorDAOUpdated(address,address,address)"(
      cdaoOld?: null,
      cdaoNew?: null,
      creator?: null
    ): CreatorDAOUpdatedEventFilter;
    CreatorDAOUpdated(
      cdaoOld?: null,
      cdaoNew?: null,
      creator?: null
    ): CreatorDAOUpdatedEventFilter;

    "CreatorTokenCreated(address,address)"(
      token?: null,
      creator?: null
    ): CreatorTokenCreatedEventFilter;
    CreatorTokenCreated(
      token?: null,
      creator?: null
    ): CreatorTokenCreatedEventFilter;

    "CreatorVaultCreated(address,address)"(
      vault?: null,
      creator?: null
    ): CreatorVaultCreatedEventFilter;
    CreatorVaultCreated(
      vault?: null,
      creator?: null
    ): CreatorVaultCreatedEventFilter;

    "CreatorVaultUpdated(address,address,address)"(
      cVaultOld?: null,
      cVaultNew?: null,
      creator?: null
    ): CreatorVaultUpdatedEventFilter;
    CreatorVaultUpdated(
      cVaultOld?: null,
      cVaultNew?: null,
      creator?: null
    ): CreatorVaultUpdatedEventFilter;
  };

  estimateGas: {
    allCreators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creatorDAO(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    creatorToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    creatorVault(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<BigNumber>;

    discount(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeToken(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    feeToSetter(overrides?: CallOverrides): Promise<BigNumber>;

    getCreatorAdmins(
      _creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatorExtraFee(
      _creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatorSaleFee(
      _creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCreatorAdmin(
      _creator: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkWrappedToken(overrides?: CallOverrides): Promise<BigNumber>;

    newCreator(
      _creator: string,
      _dao: string,
      _vault: string,
      _name: string,
      _symbol: string,
      _creatorSaleFeeNative: BigNumberish,
      _creatorSaleFeeUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    noOFTokensForDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    removeCreatorAdmins(
      _creator: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreatorAdmins(
      _creator: string,
      admins: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDiscount(
      _discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExchangeToken(
      _exchangeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNoOFTokensForDiscount(
      _noOFTokensForDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCreatorExtraFeeNative(
      _creator: string,
      _creatorExtraFeeNative: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCreatorExtraFeeUSD(
      _creator: string,
      _creatorExtraFeeUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCreatorSaleFeeNative(
      _creator: string,
      _creatorSaleFeeNative: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCreatorSaleFeeUSD(
      _creator: string,
      _creatorSaleFeeUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allCreators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creatorDAO(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creatorToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creatorVault(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    discount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToSetter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCreatorAdmins(
      _creator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatorExtraFee(
      _creator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatorSaleFee(
      _creator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCreatorAdmin(
      _creator: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkWrappedToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newCreator(
      _creator: string,
      _dao: string,
      _vault: string,
      _name: string,
      _symbol: string,
      _creatorSaleFeeNative: BigNumberish,
      _creatorSaleFeeUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    noOFTokensForDiscount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeCreatorAdmins(
      _creator: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreatorAdmins(
      _creator: string,
      admins: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDiscount(
      _discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExchangeToken(
      _exchangeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNoOFTokensForDiscount(
      _noOFTokensForDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCreatorExtraFeeNative(
      _creator: string,
      _creatorExtraFeeNative: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCreatorExtraFeeUSD(
      _creator: string,
      _creatorExtraFeeUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCreatorSaleFeeNative(
      _creator: string,
      _creatorSaleFeeNative: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCreatorSaleFeeUSD(
      _creator: string,
      _creatorSaleFeeUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
