/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface XeldoradoVaultLTInterface extends utils.Interface {
  functions: {
    "allNFTs()": FunctionFragment;
    "allOnSaleNFTs()": FunctionFragment;
    "allSoldNFTs()": FunctionFragment;
    "buyNFT(address,uint256[])": FunctionFragment;
    "creator()": FunctionFragment;
    "dao()": FunctionFragment;
    "initialise(string,string,address,address)": FunctionFragment;
    "listNFTsForSale(uint256[],uint256[])": FunctionFragment;
    "mintNFTUsingVaultContract(string[])": FunctionFragment;
    "nftContract()": FunctionFragment;
    "token()": FunctionFragment;
    "updateNFTPrice(uint256[],uint256[])": FunctionFragment;
    "vaultIdToTokenId(uint256)": FunctionFragment;
    "vaultIdTonftContract(uint256)": FunctionFragment;
    "vaultIdTonftPrice(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "allNFTs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allOnSaleNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allSoldNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialise",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "listNFTsForSale",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNFTUsingVaultContract",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateNFTPrice",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultIdToTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultIdTonftContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultIdTonftPrice",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allNFTs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allOnSaleNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allSoldNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listNFTsForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNFTUsingVaultContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateNFTPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultIdToTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultIdTonftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultIdTonftPrice",
    data: BytesLike
  ): Result;

  events: {
    "NFTListed(uint256,uint256)": EventFragment;
    "NFTListingUpdate(uint256,uint256)": EventFragment;
    "NFTSold(address,uint256,uint256,uint256)": EventFragment;
    "NFTadded(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NFTListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTListingUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTadded"): EventFragment;
}

export type NFTListedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { vaultId: BigNumber; price: BigNumber }
>;

export type NFTListedEventFilter = TypedEventFilter<NFTListedEvent>;

export type NFTListingUpdateEvent = TypedEvent<
  [BigNumber, BigNumber],
  { vaultId: BigNumber; price: BigNumber }
>;

export type NFTListingUpdateEventFilter =
  TypedEventFilter<NFTListingUpdateEvent>;

export type NFTSoldEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  { _nft: string; _tokenId: BigNumber; vaultId: BigNumber; price: BigNumber }
>;

export type NFTSoldEventFilter = TypedEventFilter<NFTSoldEvent>;

export type NFTaddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _nft: string; _tokenId: BigNumber; vaultid: BigNumber }
>;

export type NFTaddedEventFilter = TypedEventFilter<NFTaddedEvent>;

export interface XeldoradoVaultLT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XeldoradoVaultLTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allNFTs(overrides?: CallOverrides): Promise<[BigNumber]>;

    allOnSaleNFTs(overrides?: CallOverrides): Promise<[BigNumber]>;

    allSoldNFTs(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyNFT(
      _to: string,
      _vaultIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creator(overrides?: CallOverrides): Promise<[string]>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    initialise(
      _name: string,
      _symbol: string,
      _token: string,
      _dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listNFTsForSale(
      vaultIds: BigNumberish[],
      priceInBaseTokens: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintNFTUsingVaultContract(
      _tokenURI: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftContract(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    updateNFTPrice(
      vaultIds: BigNumberish[],
      priceInBaseTokens: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultIdToTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultIdTonftContract(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    vaultIdTonftPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  allNFTs(overrides?: CallOverrides): Promise<BigNumber>;

  allOnSaleNFTs(overrides?: CallOverrides): Promise<BigNumber>;

  allSoldNFTs(overrides?: CallOverrides): Promise<BigNumber>;

  buyNFT(
    _to: string,
    _vaultIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creator(overrides?: CallOverrides): Promise<string>;

  dao(overrides?: CallOverrides): Promise<string>;

  initialise(
    _name: string,
    _symbol: string,
    _token: string,
    _dao: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listNFTsForSale(
    vaultIds: BigNumberish[],
    priceInBaseTokens: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintNFTUsingVaultContract(
    _tokenURI: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftContract(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  updateNFTPrice(
    vaultIds: BigNumberish[],
    priceInBaseTokens: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultIdToTokenId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultIdTonftContract(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  vaultIdTonftPrice(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    allNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    allOnSaleNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    allSoldNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    buyNFT(
      _to: string,
      _vaultIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    creator(overrides?: CallOverrides): Promise<string>;

    dao(overrides?: CallOverrides): Promise<string>;

    initialise(
      _name: string,
      _symbol: string,
      _token: string,
      _dao: string,
      overrides?: CallOverrides
    ): Promise<void>;

    listNFTsForSale(
      vaultIds: BigNumberish[],
      priceInBaseTokens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintNFTUsingVaultContract(
      _tokenURI: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    nftContract(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    updateNFTPrice(
      vaultIds: BigNumberish[],
      priceInBaseTokens: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    vaultIdToTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultIdTonftContract(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    vaultIdTonftPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "NFTListed(uint256,uint256)"(
      vaultId?: null,
      price?: null
    ): NFTListedEventFilter;
    NFTListed(vaultId?: null, price?: null): NFTListedEventFilter;

    "NFTListingUpdate(uint256,uint256)"(
      vaultId?: null,
      price?: null
    ): NFTListingUpdateEventFilter;
    NFTListingUpdate(vaultId?: null, price?: null): NFTListingUpdateEventFilter;

    "NFTSold(address,uint256,uint256,uint256)"(
      _nft?: null,
      _tokenId?: null,
      vaultId?: null,
      price?: null
    ): NFTSoldEventFilter;
    NFTSold(
      _nft?: null,
      _tokenId?: null,
      vaultId?: null,
      price?: null
    ): NFTSoldEventFilter;

    "NFTadded(address,uint256,uint256)"(
      _nft?: null,
      _tokenId?: null,
      vaultid?: null
    ): NFTaddedEventFilter;
    NFTadded(_nft?: null, _tokenId?: null, vaultid?: null): NFTaddedEventFilter;
  };

  estimateGas: {
    allNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    allOnSaleNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    allSoldNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    buyNFT(
      _to: string,
      _vaultIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    initialise(
      _name: string,
      _symbol: string,
      _token: string,
      _dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listNFTsForSale(
      vaultIds: BigNumberish[],
      priceInBaseTokens: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintNFTUsingVaultContract(
      _tokenURI: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftContract(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    updateNFTPrice(
      vaultIds: BigNumberish[],
      priceInBaseTokens: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultIdToTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultIdTonftContract(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultIdTonftPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allNFTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allOnSaleNFTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allSoldNFTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyNFT(
      _to: string,
      _vaultIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialise(
      _name: string,
      _symbol: string,
      _token: string,
      _dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listNFTsForSale(
      vaultIds: BigNumberish[],
      priceInBaseTokens: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintNFTUsingVaultContract(
      _tokenURI: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateNFTPrice(
      vaultIds: BigNumberish[],
      priceInBaseTokens: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultIdToTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultIdTonftContract(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultIdTonftPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
